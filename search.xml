<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vue-cli构建项目 npm run build后应该怎么运行在本地查看效果]]></title>
    <url>%2F%2Fblog%2Fvue-run-build.html</url>
    <content type="text"><![CDATA[运行npm run build 本地查看页面效果本文以vue官方脚手架vue-cli构建的项目为例 这时如果直接运行npn run build是可以运行并打包你的代码的，不会报任何异常或错误，但是你会看到你的命令行打包完成有这样一句提示： 123Build complete.Tip: built files are meant to be served over an HTTP server.Opening index.html over file:// won\'t work 运行完npm run build,打开项目中的dist目录下的index.html文件！ 看到index.html的 控制台会出现一片404 如下图： 解决方案 因为 config 目录下的 index.js 中的 build 配置的 assetsPublicPath 为 / 绝对路径,所以找不到打包以后的资源 我们只要报 build 中的 assetsPublicPath 改为 ./ 就可以了，在运行一次npm run build,再打开index.html就可以在本地看了]]></content>
      <categories>
        <category>vue</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>ECMAScript 6</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3transfrom3D]]></title>
    <url>%2F%2Fblog%2Fcss3transfrom3D.html</url>
    <content type="text"><![CDATA[css3 3d transfrom 参考 &gt; http://www.zhangxinxu.com/wordpress/2012/09/css3-3d-transform-perspective-animate-transition/ 3D变化示意图 认识 rotate rotateX() 以x轴为中心旋转 rotateY() 以Y轴为中心旋转 rotateZ() 以Z轴为中心旋转 perspective属性perspective的意思是：透视,远景CSS3 3D transform的透视点是在浏览器的前方！显示器中3D效果元素的透视点在显示器的上方（不是后面），近似就是我们眼睛所在方位！ translateZ帮你寻找透视位置如果说rotateX/rotateY/rotateZ可以帮助理解三维坐标，则translateZ则可以帮你理解透视位置。我们都知道近大远小的道理，对于没有rotateX以及rotateY的元素，translateZ的功能就是让元素在自己的眼前或近或远。比方说，我们设置元素perspective为201像素，如下： 1perspective: 201px; 则其子元素，设置的translateZ值越小，则子元素大小越小（因为元素远去，我们眼睛看到的就会变小）;可参考 &gt; http://www.zhangxinxu.com/study/201209/transform-perspective-translateZ.html 反转效果css代码 1234567.flip-container&#123;perspective:1000&#125;.flip-container:hover .flipper,.flip-container.hover .flipper&#123;transform:rotateY(180deg)&#125;.flip-container,.front,.back&#123;width:320px;height:480px&#125;.flipper&#123;transition:0.6s;transform-style:preserve-3d;position:relative&#125;.front,.back&#123;backface-visibility:hidden;position:absolute;top:0;left:0&#125;.front&#123;z-index:2;background:red&#125;.back&#123;background:blue;transform:rotateY(180deg)&#125; 1234567.flip-container&#123;-webkit-perspective:1000;-moz-perspective:1000;-ms-perspective:1000;perspective:1000;-ms-transform:perspective(1000px);-moz-transform:perspective(1000px);-moz-transform-style:preserve-3d;-ms-transform-style:preserve-3d&#125;.flip-container:hover .back.flip&#123;-webkit-transform:rotateY(0deg);-moz-transform:rotateY(0deg);-o-transform:rotateY(0deg);-ms-transform:rotateY(0deg);transform:rotateY(0deg)&#125;.flip-container:hover .front.flip&#123;-webkit-transform:rotateY(180deg);-moz-transform:rotateY(180deg);-o-transform:rotateY(180deg);transform:rotateY(180deg)&#125;.flipper&#123;-webkit-transition:0.6s;-webkit-transform-style:preserve-3d;-ms-transition:0.6s;-moz-transition:0.6s;-moz-transform:perspective(1000px);-moz-transform-style:preserve-3d;-ms-transform-style:preserve-3d;transition:0.6s;transform-style:preserve-3d;position:relative;height:100%&#125;.front,.back&#123;-webkit-backface-visibility:hidden;-moz-backface-visibility:hidden;-ms-backface-visibility:hidden;backface-visibility:hidden;-webkit-transition:0.6s;-webkit-transform-style:preserve-3d;-webkit-transform:rotateY(0deg);-moz-transition:0.6s;-moz-transform-style:preserve-3d;-moz-transform:rotateY(0deg);-o-transition:0.6s;-o-transform-style:preserve-3d;-o-transform:rotateY(0deg);-ms-transition:0.6s;-ms-transform-style:preserve-3d;-ms-transform:rotateY(0deg);transition:0.6s;transform-style:preserve-3d;transform:rotateY(0deg);position:absolute;top:0;left:0&#125;.front&#123;-webkit-transform:rotateY(0deg);-ms-transform:rotateY(0deg);z-index:2;width:100%;height:100%&#125;.back&#123;-webkit-transform:rotateY(-180deg);-moz-transform:rotateY(-180deg);-o-transform:rotateY(-180deg);-ms-transform:rotateY(-180deg);transform:rotateY(-180deg);height:100%&#125; html代码 12345678910&lt;div class="flip-container" ontouchstart="this.classList.toggle('hover');"&gt; &lt;div class="flipper"&gt; &lt;div class="front"&gt; &lt;!-- 前面内容 --&gt; &lt;/div&gt; &lt;div class="back"&gt; &lt;!-- 背面内容 --&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;]]></content>
      <categories>
        <category>css3,</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[es6中let、const和var之间的关联、区别]]></title>
    <url>%2F%2Fblog%2Fes6-1.html</url>
    <content type="text"><![CDATA[let、const、var的区别（let、const 为es5新添加的） let 允许你声明一个作用域被限制在块级中的变量、语句或者表达式。 var 声明的变量只能是全局或者整个函数块的。 const 伪常量 本身的值不能改变 d 1234567&#123; let a = 10; var b = 1;&#125;a // ReferenceError: a is not defined.b // 1 let const 暂时性死区 （temporal dead zone，简称 TDZ）只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。 12345var tmp = 123;if (true) &#123; tmp = 'abc'; // ReferenceError let tmp;&#125; 必须在声明以后才能使用 ES6 规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。 参考 &gt; https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let 兼容性查询]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>ECMAScript 6</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端注意事项]]></title>
    <url>%2F%2Fblog%2Fmobile-all.html</url>
    <content type="text"><![CDATA[一些问题阐述 (未完待续) 设备更新换代快 + 浏览器厂商不统一———— 兼容问题多 网络更复杂——弱网络，低端机性能差————页面打开慢 未知问题——坑多 meta基础知识 H5页面窗口自动调整到设备宽度，并禁止用户缩放页面&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot; /&gt; 忽略将页面中的数字识别为电话号码&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot; /&gt; 忽略Android平台中对邮箱地址的识别&lt;meta name=&quot;format-detection&quot; content=&quot;email=no&quot; /&gt; 当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;&lt;!-- ios7.0版本以后，safari上已看不到效果 --&gt; viewport模板 ———— 通用12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no" name="viewport"&gt; &lt;meta content="yes" name="apple-mobile-web-app-capable"&gt; &lt;meta content="black" name="apple-mobile-web-app-status-bar-style"&gt; &lt;meta content="telephone=no" name="format-detection"&gt; &lt;meta content="email=no" name="format-detection"&gt; &lt;title&gt;标题&lt;/title&gt; &lt;link rel="stylesheet" href="index.css"&gt; &lt;/head&gt; &lt;body&gt; 这里开始内容 &lt;/body&gt;&lt;/html&gt; 常见问题移动端如何定义字体font-family 中文字体使用系统默认即可，英文用Helvetica /* 移动端定义字体的代码 */ body{font-family:Helvetica;} 移动端字体单位font-size选择px还是rem 对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可 对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备 / 长宽占位 rem算法, 根据root的rem来计算各元素相对rem, 默认html 750/10 = 75px / 可以参考 &gt; http://www.cnblogs.com/well-nice/p/5509589.html 12345678 updataHtml(); function updataHtml() &#123; var w = document.documentElement.offsetWidth; document.documentElement.style.fontSize = w / 10 + "px"; &#125; window.onresize = function () &#123; updataHtml();&#125; 移动端click屏幕产生200-300 ms的延迟响应 在IOS safari下，大概为300毫秒，IOS 自带的双击页面放大，点击完成第一次时，会等待第二次点击，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理 fastclick可以解决在手机上点击事件的300ms延迟 zepto的touch模块，tap事件也是为了解决在click的延迟问题 触摸事件的响应顺序ontouchstartontouchmoveontouchendonclick解决300ms延迟的问题，也可以通过绑定ontouchstart事件，加快对事件的响应 什么是Retina 显示屏，带来了什么问题retina：一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个在高清显示屏中的位图被放大，图片会变得模糊，因此移动端的视觉稿通常会设计为传统PC的2倍设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2 12//例如图片宽高为：200px*200px，那么写法如下.css&#123;width:100px;height:100px;background-size:100px 100px;&#125; 其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px 1.css&#123;font-size:20px&#125; ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0，也就是属性值的最后一位设置为0就可以去除半透明灰色遮罩 1a,button,input,textarea&#123;-webkit-tap-highlight-color: rgba(0,0,0,0;)&#125; 部分android系统中元素被点击时产生的边框怎么去掉android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果 1234a,button,input,textarea&#123; -webkit-tap-highlight-color: rgba(0,0,0,0;) -webkit-user-modify:read-write-plaintext-only; &#125; 兼容性不是很好 winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉、1&lt;meta name="msapplication-tap-highlight" content="no"&gt; webkit表单元素的默认外观怎么重置1.css&#123;-webkit-apperarance:none&#125; 把各个浏览器表单的默认样式重置 伪元素改变number类型input框的默认样式123456789input[type=number]::-webkit-textfield-decoration-container &#123; background-color: transparent; &#125;input[type=number]::-webkit-inner-spin-button &#123; -webkit-appearance: none;&#125;input[type=number]::-webkit-outer-spin-button &#123; -webkit-appearance: none;&#125;]]></content>
      <categories>
        <category>mobile</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>javascript</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大家好]]></title>
    <url>%2F%2Fblog%2FHello.html</url>
    <content type="text"><![CDATA[希望以后每个星期 写一片博客， 算是对自己一周工作和自主学习的总结和记录]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F%2Fblog%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>