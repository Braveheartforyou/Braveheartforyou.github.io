<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>asyncnode</title>
  
  <subtitle>asyncnode</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://asyncnode.com/"/>
  <updated>2020-06-01T00:18:43.872Z</updated>
  <id>http://asyncnode.com/</id>
  
  <author>
    <name>asyncnode</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript了解JS中的位运算符</title>
    <link href="http://asyncnode.com/blog/javascript/docs/bitwise-operators.html"/>
    <id>http://asyncnode.com/blog/javascript/docs/bitwise-operators.html</id>
    <published>2020-01-15T02:43:12.000Z</published>
    <updated>2020-06-01T00:18:43.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript中的按位操作符"><a href="#JavaScript中的按位操作符" class="headerlink" title="JavaScript中的按位操作符"></a>JavaScript中的按位操作符</h2><p>JavaScript提供了几种运算符，可以对一些简单的值进行基本操作，比如<code>算术运算符</code>、<code>赋值运算符</code>、<code>逻辑运算符</code>、<code>按位操作符</code>等。其他的操作运算符都是经常用到的，比如算数运算符的<code>+、-、*、/</code>；赋值运算符的<code>=、+=、-=</code>；逻辑运算符的<code>||、&amp;&amp;、!</code>等等。但是<code>按位操作符</code>操作符是比较来说不常用的，很多人也不知道都有什么<code>按位操作符</code>?</p><p>本章内容大致分为：</p><ul><li>有哪些<code>按位操作符</code>?简单的应用</li><li>在日常开发是<code>按位操作符</code>可以做哪些事情？</li></ul><p>会一步一步从了解<code>按位操作符</code>到能把它运用到项目中来，以使自己的编码更简洁、更方便。</p><h2 id="简单了解按位操作符"><a href="#简单了解按位操作符" class="headerlink" title="简单了解按位操作符"></a>简单了解按位操作符</h2><p>首先来了解一下<code>按位操作符</code>的定义是什么： <strong><code>按位操作符（Bitwise operators） 将其操作数（operands）当作32位的比特序列（由0和1组成），而不是十进制、十六进制或八进制数值</code></strong>。其实<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" target="_blank" rel="noopener">mdn 中 按位操作符</a>讲的有点晦涩，不太好理解通过对下面的介绍可能会好理解一点。</p><p>JavaScript内部<code>Number</code>是以<code>64位浮点数</code>的形式储存，但是做位运算的时候，是以<code>32位带符号的整数</code>进行运算的，并且返回值也是一个<code>32位带符号的整数</code>。</p><p>JavaScript中有七中按位操作符，如下表格所示：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">用法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">按位与（ AND）</td><td style="text-align:center">a &amp; b</td><td style="text-align:center">对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。</td></tr><tr><td style="text-align:center">按位或（OR）</td><td style="text-align:center">a 丨 b</td><td style="text-align:center">对于每一个比特位，当两个操作数相应的比特位至少有一个1时，结果为1，否则为0。</td></tr><tr><td style="text-align:center">按位异或（XOR）</td><td style="text-align:center">a ^ b</td><td style="text-align:center">对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。</td></tr><tr><td style="text-align:center">按位非（NOT）</td><td style="text-align:center">~ a</td><td style="text-align:center">反转操作数的比特位，即0变成1，1变成0。</td></tr><tr><td style="text-align:center">左移（Left shift）</td><td style="text-align:center">a &lt;&lt; b</td><td style="text-align:center">将 a 的二进制形式向左移 b (&lt; 32) 比特位，右边用0填充。</td></tr><tr><td style="text-align:center">有符号右移</td><td style="text-align:center">a &gt;&gt; b</td><td style="text-align:center">将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位。</td></tr><tr><td style="text-align:center">无符号右移</td><td style="text-align:center">a &gt;&gt;&gt; b</td><td style="text-align:center">将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td></tr></tbody></table><h2 id="简单了解二进制"><a href="#简单了解二进制" class="headerlink" title="简单了解二进制"></a>简单了解二进制</h2><p>已经知道计算机中，所有数据最终都是使用二进制数表达。<br><code>10进制</code>转换为<code>2进制</code>or<code>16进制</code>如下图所示：</p><p><img src="../../../images/javascript/btye-1.webp" alt="二进制"></p><p><strong>原码</strong>: <code>一个整数，按照绝对值大小转换成的二进制数，称为原码。</code><br>其实就是一个数值的二进制比特位码，比如说<code>5</code>转换成二制是<code>101</code>, <code>Number/Int</code>类型的数占用<code>4字节(32位)</code>，它们为会默认填充<code>0</code>,所以<code>5</code>的二进制位<code>00000000 00000000 00000000 00000101</code>。</p><p><strong>反码</strong>: <code>将二进制数按位取反，所得的新二进制数称为原二进制数的反码。</code><br>取反操作指：原为<code>1</code>取反为<code>0</code>；原为<code>0</code>取反为<code>1</code>.<br>比如：将<code>00000000 00000000 00000000 00000101</code>每一位取反，得<code>11111111 11111111 11111111 11111010</code>。<br>称：<code>11111111 11111111 11111111 11111010</code>是 <code>00000000 00000000 00000000 00000101</code> 的反码。<br>反码是相互的，所以也可称：<br><code>11111111 11111111 11111111 11111010</code> 和<code>00000000 00000000 00000000 00000101</code> 互为反码。</p><p><strong>补码</strong>：<code>反码加1称为补码。</code><br>也就是说，要得到一个数的<code>补码</code>，先得到<code>反码</code>，然后将<code>反码加上1</code>，所得数称为<code>补码</code>。<br>比如：<code>00000000 00000000 00000000 00000101</code>的反码是：<code>11111111 11111111 11111111 11111010</code>。<br>那么，补码为：<br><code>11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011</code><br>所以，-5 在计算机中表达为：<code>11111111 11111111 11111111 11111011</code>。<br>转换为十六进制：<code>0xFFFFFFFB</code>。</p><p><strong>负值在二进制中</strong>： 二进制为了区分<code>正数</code>和<code>负数</code>，在<code>最高位</code>拿出来当作<code>符号位</code>，<code>0表示正数，1表示负数</code>。</p><p>比如我们就拿<code>-1</code>来做一下分析：</p><ul><li><code>1</code>的原码为：<code>00000000 00000000 00000000 00000001</code></li><li><code>1</code>的反码为：<code>11111111 11111111 11111111 11111110</code></li><li><code>1</code>的补码为：<code>11111111 11111111 11111111 11111110 + 1 = 11111111 11111111 11111111 11111111</code>，也就是<code>-1</code>的二进制</li></ul><h2 id="JavaScript中七中操作符"><a href="#JavaScript中七中操作符" class="headerlink" title="JavaScript中七中操作符"></a>JavaScript中七中操作符</h2><h3 id="按位与（-AND）-amp"><a href="#按位与（-AND）-amp" class="headerlink" title="按位与（ AND）&amp;"></a>按位与（ AND）<code>&amp;</code></h3><p><code>&amp;</code>以特定的方式组合操作<code>二进制</code>数中对应的位，如果对应的位都为<code>1</code>，那么结果就是<code>1</code>， 如果任意一个位是<code>0</code> 则结果就是<code>0</code>。请看下面示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>&amp;<span class="number">2</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>&amp;<span class="number">3</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>1&amp;2对比过程</strong>: 因为<code>1</code>和<code>2</code>它们的比特位没有相同的位置都为<code>1</code>，所以会返回一个<code>00000000 00000000 00000000 00000000</code>的<code>32位二进制</code>，转换位10进制就是<code>0</code><br><strong>1&amp;3对比过程</strong>: 因为<code>1</code>和<code>3</code>它们的最低位比特位都为<code>1</code>，所以会返回一个<code>00000000 00000000 00000000 00000001</code>的<code>32位二进制</code>，转换位10进制就是<code>1</code></p><h3 id="按位或-OR"><a href="#按位或-OR" class="headerlink" title="按位或(OR)|"></a>按位或(OR)<code>|</code></h3><p><code>|</code> 运算符跟 <code>&amp;</code> 的区别在于如果对应的位中<code>任一个</code>比特位为<code>1</code> 那么结果就是<code>1</code>。请看下面示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>|<span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>|<span class="number">3</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>1|2对比过程</strong>: 因为<code>1</code>和<code>2</code>它们的比特位为<code>1</code>的并集就是<code>00000000 00000000 00000000 00000011</code>的<code>32位二进制</code>，转换位10进制就是<code>3</code><br><strong>1|3对比过程</strong>: 因为<code>1</code>和<code>3</code>它们的比特位为<code>1</code>的并集就是<code>00000000 00000000 00000000 00000011</code>的<code>32位二进制</code>，转换位10进制就是<code>3</code></p><h3 id="按位异或-XOR"><a href="#按位异或-XOR" class="headerlink" title="按位异或(XOR)^"></a>按位异或(XOR)<code>^</code></h3><p><code>^</code>如果对应两个操作位有且仅有一个<code>1</code>时结果为<code>1</code>，其他都是<code>0</code>。请看下面示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>^<span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>^<span class="number">3</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>1^2对比过程</strong>: 因为<code>1</code>和<code>2</code>它们的比特位中只有其中一个为<code>1</code>的组合出来是<code>00000000 00000000 00000000 00000011</code>的<code>32位二进制</code>，转换位10进制就是<code>3</code><br><strong>1^3对比过程</strong>: 因为<code>1</code>和<code>3</code>它们的比特位中只有其中一个为<code>1</code>的组合出来<code>00000000 00000000 00000000 00000010</code>的<code>32位二进制</code>，转换位10进制就是<code>2</code></p><h3 id="按位非-NOT"><a href="#按位非-NOT" class="headerlink" title="按位非(NOT)~"></a>按位非(NOT)<code>~</code></h3><p><code>~</code>运算符是对位求反，<code>1</code>变<code>0</code>, <code>0</code>变<code>1</code>，也就是求二进制的反码。请看下面示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="built_in">console</span>.log(~<span class="number">1</span>) <span class="comment">// -2</span></span><br></pre></td></tr></table></figure><ul><li><code>1</code>的二进制反码表示为<code>11111111 11111111 11111111 11111110</code>.</li><li>因为<code>1</code>的<code>反码`</code>最高位为1<code>表示它是</code>负数<code>，</code>负数<code>又是以</code>补码<code>形式存储的，所以我们要反推一下</code>补码`</li><li>那么<code>1</code>的<code>反码 - 1</code>为<code>11111111 11111111 11111111 11111101</code>，我们要再把得到的<code>反码 - 1</code>再取<code>反码</code>为<code>00000000 00000000 00000000 00000010</code>,同时要加上一个负号<code>-</code>，最后转换为<code>10进制</code>就是<code>-2</code></li></ul><p>如果不理解<code>反码</code>、<code>原码</code>、<code>补码</code>可以看本篇文章上面的章节。</p><h3 id="左移（Left-shift）-lt-lt"><a href="#左移（Left-shift）-lt-lt" class="headerlink" title="左移（Left shift）&lt;&lt;"></a>左移（Left shift）<code>&lt;&lt;</code></h3><p><code>&lt;&lt;运算符</code>使指定值的二进制数<code>所有位都左移指定次数</code>，其移动规则：<code>丢弃高位</code>，低位<code>补0</code>即按二进制形式把所有的数字向<code>左移动对应的位数，高位移出(舍弃)，低位的空位补零</code>。请看下面示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &lt;&lt; <span class="number">1</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="有符号右移-gt-gt"><a href="#有符号右移-gt-gt" class="headerlink" title="有符号右移 &gt;&gt;"></a>有符号右移 <code>&gt;&gt;</code></h3><p><code>&gt;&gt;该操作符</code>会将指定操作数的二进制位<code>向右移动指定的位数</code>。<code>向右被移出的位被丢弃，拷贝最左侧的位以填充左侧</code>。由于新的最左侧的位总是和以前相同，符号位没有被改变。所以被称作“<code>符号传播</code>”。请看下面示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> &gt;&gt; <span class="number">1</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="无符号右移-gt-gt-gt"><a href="#无符号右移-gt-gt-gt" class="headerlink" title="无符号右移&gt;&gt;&gt;"></a>无符号右移<code>&gt;&gt;&gt;</code></h3><p><code>&gt;&gt;&gt;该操作符</code>会将第一个操作数向右移动指定的位数。<code>向右被移出的位被丢弃，左侧用0填充</code>。因为符号位变成了 0，所以结果<code>总是非负</code>的。（译注：即便<code>右移 0 个比特，结果也是非负的</code>。）<br>对于非负数，有符号右移和无符号右移总是返回相同的结果。例如， <code>9 &gt;&gt;&gt; 2</code>得到 <code>2</code> 和 <code>9 &gt;&gt; 2</code> 相同。</p><h2 id="位操作符使用技巧"><a href="#位操作符使用技巧" class="headerlink" title="位操作符使用技巧"></a>位操作符使用技巧</h2><h3 id="判断奇偶"><a href="#判断奇偶" class="headerlink" title="判断奇偶"></a>判断奇偶</h3><p>通过<code>按位与（ AND） &amp;</code>来判断奇偶性 代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOdd</span> (<span class="params">int</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (int &amp; <span class="number">1</span>) === <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEven</span> (<span class="params">int</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (int &amp; <span class="number">1</span>) === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isOdd(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(isOdd(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(isEven(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(isEven(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>我们就拿<code>1 &amp; 1</code>和<code>1 &amp; 2</code>来分析它是什么执行对比的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line">(<span class="number">1</span> &amp; <span class="number">3</span>) === <span class="number">1</span> <span class="literal">true</span></span><br><span class="line">(<span class="number">1</span> &amp; <span class="number">2</span>) === <span class="number">0</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>(1 &amp; 1)</code>:  <code>1</code>的二进制简写为<code>01</code>，<code>3</code>的二进制简写为<code>11</code>，因为它们的<code>最低位</code>都为<code>1</code>，所以<code>按位与（ AND） &amp;</code>的结果就是<code>00000000 00000000 00000000 00000001</code>，最后转换为10进制<code>1</code>.<br><code>(1 &amp; 2)</code>: <code>1</code>的二进制简写为<code>01</code>，<code>2</code>的二进制简写为<code>10</code>，它们没有相同比特位为<code>1</code>，所以<code>按位与（ AND） &amp;</code>的结果就是<code>00000000 00000000 00000000 00000000</code>，最后转换为10进制<code>0</code>.</p><h3 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h3><p><code>&gt;&gt;，&lt;&lt;，|，~~</code>取整：它们无论是正数还是负数都不会受到影响，同时它们都是向下取整。<br><code>&gt;&gt;&gt;</code>取整：<code>&gt;&gt;&gt;</code>它只能对正数向下取整。</p><h4 id="gt-gt-，-lt-lt-，-，"><a href="#gt-gt-，-lt-lt-，-，" class="headerlink" title="&gt;&gt;，&lt;&lt;，|，~~"></a>&gt;&gt;，&lt;&lt;，|，~~</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">4.5</span>) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">-4.5</span>) <span class="comment">// -5</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">4.5</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">-4.5</span>) <span class="comment">// -4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 &gt;&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">24.6</span> &gt;&gt; <span class="number">0</span>) <span class="comment">// 24 向下取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">24.3</span> &gt;&gt; <span class="number">0</span>) <span class="comment">// 24 向下取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-24.6</span> &gt;&gt; <span class="number">0</span>) <span class="comment">// -24 向上取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-24.3</span> &gt;&gt; <span class="number">0</span>) <span class="comment">// -24 向上取整</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 &lt;&lt;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">24.6</span> &lt;&lt; <span class="number">0</span>) <span class="comment">// 24 向下取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">24.3</span> &lt;&lt; <span class="number">0</span>) <span class="comment">// 24 向下取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-24.6</span> &lt;&lt; <span class="number">0</span>) <span class="comment">// -24 向上取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-24.3</span> &lt;&lt; <span class="number">0</span>) <span class="comment">// -24 向上取整</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 |</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">24.6</span> | <span class="number">0</span>) <span class="comment">// 24 向下取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">24.3</span> | <span class="number">0</span>) <span class="comment">// 24 向下取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-24.6</span> | <span class="number">0</span>) <span class="comment">// -24 向上取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-24.3</span> | <span class="number">0</span>) <span class="comment">// -24 向上取整</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">24.6</span>) <span class="comment">// 24 向下取整</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">24.3</span>) <span class="comment">// 24 向下取整</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">-24.6</span>) <span class="comment">// -24 向上取整</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">-24.3</span>) <span class="comment">// -24 向上取整</span></span><br></pre></td></tr></table></figure><p><code>&gt;&gt;，&lt;&lt;，|</code>无论是正负数都会向下取整。</p><h4 id="gt-gt-gt-，"><a href="#gt-gt-gt-，" class="headerlink" title="&gt;&gt;&gt;，~~"></a><code>&gt;&gt;&gt;，~~</code></h4><p><strong>&gt;&gt;&gt;</strong>: 它只能对<code>正数</code>做向下取整，不能用于对<code>负数</code>取整。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用 &gt;&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">24.6</span> &gt;&gt;&gt; <span class="number">0</span>) <span class="comment">// 24 向下取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">24.3</span> &gt;&gt;&gt; <span class="number">0</span>) <span class="comment">// 24 向下取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-24.6</span> &gt;&gt;&gt; <span class="number">0</span>) <span class="comment">// 4294967272</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-24.3</span> &gt;&gt;&gt; <span class="number">0</span>) <span class="comment">// 4294967272</span></span><br></pre></td></tr></table></figure><h3 id="交换值"><a href="#交换值" class="headerlink" title="交换值"></a>交换值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>,</span><br><span class="line">  b = <span class="number">2</span>;</span><br><span class="line">a = a ^ b; <span class="comment">// 00000000 00000000 00000000 00000011 为 3 a = 3</span></span><br><span class="line">b = a ^ b; <span class="comment">// 00000000 00000000 00000000 00000001 为 1 b = 1</span></span><br><span class="line">a = a ^ b; <span class="comment">// 00000000 00000000 00000000 00000010 为 2 a = 2</span></span><br></pre></td></tr></table></figure><p>我们简单分析一下执行过程：<br><code>a = a ^ b</code>: 现在<code>a = 1; b = 2</code>我们知道<code>1</code>和<code>2</code>的二进制，通过<code>^(相同的比特位只有一个为1，就会返回1，否则返回0)</code>计算得出<code>00000000 00000000 00000000 00000011</code>，转换为<code>10进制</code>的话就是<code>3</code>，所以现在<code>a = 3</code>。<br><code>b = a ^ b</code>: 现在<code>a = 3; b = 2</code>我们知道<code>2</code>和<code>3</code>的二进制，通过<code>^(相同的比特位只有一个为1，就会返回1，否则返回0)</code>计算得出<code>00000000 00000000 00000000 00000001</code>，转换为<code>10进制</code>的话就是<code>1</code>，所以现在<code>b = 1</code>。<br><code>a = a ^ b</code>: 现在<code>a = 3; b = 1</code>我们知道<code>1</code>和<code>3</code>的二进制，通过<code>^(相同的比特位只有一个为1，就会返回1，否则返回0)</code>计算得出<code>00000000 00000000 00000000 00000010</code>，转换为<code>10进制</code>的话就是<code>2</code>，所以现在<code>a = 2</code>。<br>最后就是<code>a = 2; b = 1</code></p><h3 id="HEX-lt-gt-RGB-互转"><a href="#HEX-lt-gt-RGB-互转" class="headerlink" title="HEX &lt;=&gt; RGB 互转"></a>HEX &lt;=&gt; RGB 互转</h3><h4 id="颜色转换：RGB转为十六进制"><a href="#颜色转换：RGB转为十六进制" class="headerlink" title="颜色转换：RGB转为十六进制"></a>颜色转换：RGB转为十六进制</h4><p><code>左移位（&lt;）运算符</code>的一个非常有用的应用程序是将颜色从<code>RGB</code>表示转换为<code>十六进制</code>表示。<br><code>RGB颜色</code>的每个组件的<code>颜色值</code>在<code>0-255</code>之间。简单地说，每个颜色值可以用<code>8位</code>完美地表示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span> =&gt; <span class="number">0b00000000</span> (<span class="number">2</span>进制) =&gt; <span class="number">0x00</span> (<span class="number">16</span>进制)</span><br><span class="line"><span class="number">255</span> =&gt; <span class="number">0b11111111</span> (<span class="number">2</span>进制) =&gt; <span class="number">0xff</span> (<span class="number">16</span>进制)</span><br></pre></td></tr></table></figure><p>因此，颜色本身可以完美地用<code>24位</code>来表示（<code>红色、绿色和蓝色分量各8位</code>）。从<code>右边</code>开始的前<code>8位</code>表示<code>蓝色</code>分量，接下来的<code>8位</code>表示<code>绿色</code>分量，之后的<code>8位</code>表示<code>红色</code>分量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(binary) =&gt; <span class="number">11111111</span> <span class="number">00100011</span> <span class="number">00010100</span></span><br><span class="line">(red) =&gt; <span class="number">11111111</span> =&gt; <span class="function"><span class="params">ff</span> =&gt;</span> <span class="number">255</span></span><br><span class="line">(green) =&gt; <span class="number">00100011</span> =&gt; <span class="number">23</span> =&gt; <span class="number">35</span></span><br><span class="line">(blue) =&gt; <span class="number">00010100</span> =&gt; <span class="number">14</span> =&gt; <span class="number">20</span></span><br><span class="line">(hex) =&gt; ff2314</span><br></pre></td></tr></table></figure><p>既然我们已经了解了如何将<code>颜色表示为24位序列</code>，那么让我们来看看如何从颜色的各个组件的值组成<code>颜色的24位</code>。假设我们有一个用<code>RGB（255、35、20）</code>表示的颜色。以下是我们如何组合这些位：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(red) =&gt; <span class="number">255</span> =&gt; <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11111111</span></span><br><span class="line">(green) =&gt;  <span class="number">35</span> =&gt; <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100011</span></span><br><span class="line">(blue) =&gt;  <span class="number">20</span> =&gt; <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00010100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们使用`&lt;&lt;` 左移动符把 red 的二进制 向高位移动 16位</span></span><br><span class="line">(red) =&gt; <span class="number">00000000</span> <span class="number">11111111</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="comment">// 我们使用`&lt;&lt;` 左移动符把 green 的二进制 向高位移动 8位</span></span><br><span class="line">(green) =&gt; <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100011</span> <span class="number">00000000</span></span><br><span class="line"><span class="comment">// blue不动</span></span><br><span class="line">(blue) =&gt;  <span class="number">20</span> =&gt; <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00010100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让后我们再通过`|按位或（OR）`合并 red | green | blue.  执行结果如下：</span></span><br><span class="line"></span><br><span class="line"><span class="number">00000000</span> <span class="number">11111111</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">| <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100011</span> <span class="number">00000000</span></span><br><span class="line">| <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00010100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到最终的二进制，再通过toString(16)转为16进制</span></span><br><span class="line"><span class="number">00000000</span> <span class="number">11111111</span> <span class="number">00100011</span> <span class="number">00010100</span></span><br></pre></td></tr></table></figure><p>下面我们封装一个函数来实现上面的伪代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RGBToHex</span>(<span class="params">[red = <span class="number">0</span>, green = <span class="number">0</span>, blue = <span class="number">0</span>] = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`#<span class="subst">$&#123;(red &lt;&lt; <span class="number">16</span> | green &lt;&lt; <span class="number">8</span> | blue).toString(<span class="number">16</span>)&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line">RGBToHex([<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>]) <span class="comment">// #ffffff</span></span><br><span class="line">RGBToHex([<span class="number">255</span>, <span class="number">21</span>, <span class="number">32</span>]) <span class="comment">// #ff1520</span></span><br></pre></td></tr></table></figure><h4 id="颜色转换：十六进制转为RGB"><a href="#颜色转换：十六进制转为RGB" class="headerlink" title="颜色转换：十六进制转为RGB"></a>颜色转换：十六进制转为RGB</h4><p>简单来说就是通过<code>右移（&gt;&gt;）运算符</code>逆推还原原来的颜色值，下面用伪代码大致整理一下思路。<br><code>有符号右移（&gt;&gt;）运算符</code>的一个非常好的应用是从颜色中<code>提取RGB颜色值</code>。当颜色以RGB表示时，很容易区分<code>红色</code>、<code>绿色</code>和<code>蓝色</code>颜色分量值。但是，对于以十六进制表示的颜色，这将花费更多的精力。</p><p>假设我们有一个用<code>十六进制</code>表示法<code>#ff2314</code>表示的颜色。下面是颜色的储存为<code>二进制</code>的编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(color) =&gt; ff2314 (hexadecimal) =&gt; <span class="number">11111111</span> <span class="number">00100011</span> <span class="number">00010100</span> (binary)</span><br><span class="line"><span class="comment">// 32-bit representation of color</span></span><br><span class="line"><span class="number">00000000</span> <span class="number">11111111</span> <span class="number">00100011</span> <span class="number">00010100</span></span><br></pre></td></tr></table></figure><p>为了获得单个部分，我们将根据需要将颜色位<code>按8的倍数右移</code>，直到从右边得到目标组件位作为<code>前8位</code>。由于颜色的32位中的符号标志位是0，因此我们可以安全地使用符号传播<code>右移位（&gt;&gt;）运算符</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">color =&gt; <span class="number">00000000</span> <span class="number">11111111</span> <span class="number">00100011</span> <span class="number">00010100</span></span><br><span class="line"><span class="comment">// 我们使用`&gt;&gt;` 右移动符把 red 的二进制 向低位移动 16位</span></span><br><span class="line">red =&gt; color &gt;&gt; <span class="number">16</span></span><br><span class="line">    =&gt; <span class="number">00000000</span> <span class="number">11111111</span> <span class="number">00100011</span> <span class="number">00010100</span> &gt;&gt; <span class="number">16</span></span><br><span class="line">    =&gt; <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11111111</span></span><br><span class="line"><span class="comment">// 我们使用`&gt;&gt;` 右移动符把 green 的二进制 向低位移动 8位</span></span><br><span class="line">green =&gt; color &gt;&gt; <span class="number">8</span></span><br><span class="line">    =&gt; <span class="number">00000000</span> <span class="number">11111111</span> <span class="number">00100011</span> <span class="number">00010100</span> &gt;&gt; <span class="number">8</span></span><br><span class="line">    =&gt; <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11111111</span> <span class="number">00100011</span></span><br><span class="line"><span class="comment">// blue不需要位移</span></span><br><span class="line">blue =&gt; color &gt;&gt; <span class="number">0</span> =&gt; color</span><br><span class="line">    =&gt; <span class="number">00000000</span> <span class="number">11111111</span> <span class="number">00100011</span> <span class="number">00010100</span></span><br></pre></td></tr></table></figure><p>现在我们将目标颜色位作为<code>右前8位</code>，我们需要一种方法来屏蔽除<code>前8位之外</code>的所有其他位。这使我们回到和<code>（&amp;）运算符</code>。请记住，<code>&amp;运算符</code>可用于确保关闭某些位。<br>让我们从创建所需的位掩码开始。就像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mask =&gt; <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11111111</span></span><br><span class="line">  =&gt; <span class="number">0b11111111</span> (binary)</span><br><span class="line">  =&gt; <span class="number">0xff</span> (hexadecimal)</span><br></pre></td></tr></table></figure><p>准备好位掩码后，我们可以对上<code>一次右移</code>操作的每个<code>结果执行与（&amp;）操作</code>，使用位掩码提取目标颜色。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">color =&gt; <span class="number">00000000</span> <span class="number">11111111</span> <span class="number">00100011</span> <span class="number">00010100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在上一步 color &gt;&gt; 16 执行结果为 00000000 00000000 00000000 11111111</span></span><br><span class="line"><span class="comment">// 在(color &gt;&gt; 16)执行的结果上 再执行 00000000 00000000 00000000 11111111 &amp; 0xff (00000000 00000000 00000000 11111111)  得到 (00000000 00000000 00000000 11111111)</span></span><br><span class="line">red =&gt; color &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span></span><br><span class="line">    =&gt;   <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11111111</span></span><br><span class="line">    =&gt; &amp; <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11111111</span></span><br><span class="line">    =&gt; = <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11111111</span></span><br><span class="line">    =&gt;   <span class="number">255</span> (decimal) <span class="comment">// 转为10进制</span></span><br><span class="line"><span class="comment">// 在上一步 color &gt;&gt; 8 执行结果为 00000000 00000000 11111111 00100011</span></span><br><span class="line"><span class="comment">// 在(color &gt;&gt; 8)执行的结果上 再执行 00000000 00000000 11111111 00100011 &amp; 0xff (00000000 00000000 00000000 11111111) 得到 (00000000 00000000 00000000 00100011)</span></span><br><span class="line">green =&gt; color &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span></span><br><span class="line">    =&gt;   <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11111111</span> <span class="number">00100011</span></span><br><span class="line">    =&gt; &amp; <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11111111</span></span><br><span class="line">    =&gt; = <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100011</span></span><br><span class="line">    =&gt;   <span class="number">35</span> (decimal) <span class="comment">// 转为10进制</span></span><br><span class="line"><span class="comment">// 直接执行 00000000 11111111 00100011 00010100 &amp; 0xff (00000000 00000000 00000000 11111111) 得到 (00000000 00000000 00000000 00010100)</span></span><br><span class="line"> blue =&gt; color &amp; <span class="number">0xff</span></span><br><span class="line">    =&gt;   <span class="number">00000000</span> <span class="number">11111111</span> <span class="number">00100011</span> <span class="number">00010100</span></span><br><span class="line">    =&gt; &amp; <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">11111111</span></span><br><span class="line">    =&gt; = <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00010100</span></span><br><span class="line">    =&gt;   <span class="number">20</span> (decimal) <span class="comment">// 转为10进制</span></span><br></pre></td></tr></table></figure><p>基于上面的伪代码，下面下面实现一个简单的函数，它会把传入的<code>hex 16进制颜色值</code>转换为<code>rgb颜色值组</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hex 16进制转换 =》 rgb 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HEXToRGB</span> (<span class="params">hex</span>) </span>&#123;</span><br><span class="line">  hex = hex.replace(<span class="regexp">/^#?([0-9a-f]&#123;6&#125;)$/i</span>, <span class="string">'$1'</span>);</span><br><span class="line">  hex = <span class="built_in">Number</span>(<span class="string">`0x<span class="subst">$&#123;hex&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    red: hex &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>,</span><br><span class="line">    green: hex &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>,</span><br><span class="line">    blue: hex &amp; <span class="number">0xff</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line">HEXToRGB(<span class="string">'#ffffff'</span>) <span class="comment">// &#123;red: 255, green: 255, blue: 255&#125;</span></span><br><span class="line">HEXToRGB(<span class="string">'#000000'</span>) <span class="comment">// &#123;red: 0, green: 0, blue: 0&#125;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为一道面试题引申出来的<code>JavaScript</code>中的按位操作符，才有了这篇文章记录JavaScript中的<code>按位操作符</code>和它们具体用来做什么。当然这个只是最简单的使用，在通信、加密中它们得到更多的应用。</p>]]></content>
    
    <summary type="html">
    
      通过本篇博客让我们了解JavaScript中的位运算符，并且在什么情况下我们可以用到位运算符。
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中交换变量a/b的多种方法</title>
    <link href="http://asyncnode.com/blog/interview-question/javascript/javascirpt-exchange-variable.html"/>
    <id>http://asyncnode.com/blog/interview-question/javascript/javascirpt-exchange-variable.html</id>
    <published>2020-01-12T14:23:53.000Z</published>
    <updated>2020-06-01T00:18:43.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>问题是有一个变量<code>a</code>、<code>b</code>要怎么交换它们的值，有多少种方法，那种方法比较好比较省时省力。我们尽量使用最少的代码和内存空间来实现变量的交换。<br>下面我们分别使用五种类型的方法实现变量交换，它们都有自己的优缺点，五种方法如下：</p><ul><li><code>借助临时变量</code></li><li><code>ES实现方法</code></li><li><code>通过加减法</code></li><li><code>按位异或</code></li><li><code>利用逗号操作符</code></li></ul><h2 id="借助临时变量"><a href="#借助临时变量" class="headerlink" title="借助临时变量"></a>借助临时变量</h2><p>首先来一个最简单的实现方式代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="comment">// 临时变量</span></span><br><span class="line"><span class="keyword">var</span> temporary = b;</span><br><span class="line">b = a;</span><br><span class="line">a = temporary;</span><br><span class="line">temporary = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>这个我们多使用了一个变量<code>temporary</code>，这种方法也是我们经常用的。如果我们不声明一个临时变量怎么实现呢。</p><p><strong>本方法优点是实现简单，缺点是多声明一个变量，在执行期间多占用内存，并且要记得在最后执行完成记得清空变量</strong></p><h2 id="ES-实现方法"><a href="#ES-实现方法" class="headerlink" title="ES 实现方法"></a>ES 实现方法</h2><p>我们可以使用<code>ES6</code>中的<code>解构</code>特性，这个应该也是比较常用的方法。但是兼容性没有上面的方法好，但是在<code>Vue</code>、<code>React</code>中经常用到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>;</span><br><span class="line">[a, b] = [b, a];</span><br></pre></td></tr></table></figure><p><strong>本方法优点代码简洁并且没有声明多余变量，缺点是兼容性并不太理想</strong></p><p>如果不使用<code>ES6</code>中的特性，实现代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>;</span><br><span class="line">a = &#123; <span class="attr">a</span>: b, <span class="attr">b</span>: a &#125;;</span><br><span class="line">b = a.b;</span><br><span class="line">a = a.a;</span><br></pre></td></tr></table></figure><p>我们通过把<code>a</code>设置为一个对象用来保存<code>a</code>、<code>b</code>的值，然后再分别取出。<strong>通过把对象替换为数组也是可以实现</strong>，这里就不做演示了。</p><p><strong>本方法优点并且没有声明多余变量，缺点是改变变量的类型在执行期间多使用内存</strong></p><h2 id="通过加减法"><a href="#通过加减法" class="headerlink" title="通过加减法"></a>通过加减法</h2><p>通过加减法也是可以实现的，首先是通过<code>加法</code>实现，代码实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>; <span class="comment">// 初始值 a</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>; <span class="comment">// 初始值 b</span></span><br><span class="line">a = a + b; <span class="comment">// a 的值为 a(100) + b(200) = 300</span></span><br><span class="line">b = a - b; <span class="comment">// b 为 a(300) - b(200) 为 100</span></span><br><span class="line">a = a - b; <span class="comment">// 因为在这次执行的时候b已经为上面的值100 a 为 a(300) - b(100) 为 200</span></span><br></pre></td></tr></table></figure><p>但是这种方式可能会导致数字溢出，所以我们可以通过<code>减法</code>来实现更安全。下面看代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>; <span class="comment">// 初始值 a</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>; <span class="comment">// 初始值 b</span></span><br><span class="line">a = a - b; <span class="comment">// a 的值为 a(100) - b(200) = -100</span></span><br><span class="line">b = b + a; <span class="comment">// b 为 a(-100) + b(200) 为 100</span></span><br><span class="line">a = b - a; <span class="comment">// 因为在这次执行的时候b已经为上面的值100 a 为 b(100) - a(-100) 为 200</span></span><br></pre></td></tr></table></figure><p><strong>加法的实现更好理解，但是存在整数溢出的风险；减法的实现不太好理解，但是并不会存在整数溢出的风险</strong></p><h2 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或"></a>按位异或</h2><p>首先我们要了解一下什么是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR" target="_blank" rel="noopener">按位异或</a>，它的定义是<strong>按位异或（XOR）：<code>a ^ b对于每一个比特位(二进制 base 2)，当两个操作数相应的比特位(二进制 base 2)有且只有一个1时，结果为1，否则为0。</code></strong></p><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a XOR b</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p>可能看到上面还是有点懵逼，那么可以看我另外一篇的博客<a href="/blog/javascript/dom/bitwise-operators.html">了解 JS 中的位运算符</a><br>我们通过上面的表格知道<code>a ^ a</code>为<code>0</code>，那么<code>a ^ a ^ b</code> 就相当于<code>0 ^ b</code>的出来的值为<code>b</code>的值。代码如下实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>; <span class="comment">// 初始值 a</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>; <span class="comment">// 初始值 b</span></span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure><p><strong>按位异或：实现方式最好，直接通过二进制对比实现、代码简洁，但是转换过程不可知</strong></p><h2 id="利用逗号操作符"><a href="#利用逗号操作符" class="headerlink" title="利用逗号操作符"></a>利用逗号操作符</h2><p>也可以通过一些特殊的技巧来实现，<code>逗号操作符</code>结合<code>()</code>或者<code>[]</code>来实现交换位置。</p><p>我们简单了解一下<code>逗号操作符：对它的每个操作数求值（从左到右），并返回最后一个操作数的值。</code>，来一个简单的实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>; <span class="comment">// 初始值 x = 1</span></span><br><span class="line">x = [x++, x + <span class="number">1</span>][<span class="number">1</span>]; <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 1. 因为有`=`复制符 要从右面开始执行，根据逗号操作符的定义我们先执行 x++; x = 2</span></span><br><span class="line"><span class="comment">// 2. 再执行 x + 1; x = 3</span></span><br><span class="line"><span class="comment">// 3. 再通过[2, 3][1]提取数组下标为1的值 x = 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">1</span>; <span class="comment">// 初始值 y = 1</span></span><br><span class="line">y = y + (<span class="number">0</span>, y++); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>我们以对象为示例大致分析一下它的执行顺序，以便于更好的理解<code>JavaScript</code>的执行顺序:</p><ol><li>声明变量<code>y</code>,并且给<code>y</code>赋值为<code>1</code></li><li><code>()</code>的优先级是最高的，然后是<code>++</code> &gt; <code>+</code>优先级次之，再是<code>=</code> &gt; <code>,</code>。执行优先级如下表格所示。</li><li>所以会先执行外部的<code>()</code>, 执行内部的代码，遇到<code>,</code>符从左开始执行<code>(0, (y++))</code>，遇到内部的<code>(y++)</code>这个时候因为<code>()</code>的优先比<code>++</code>的优先级高，所以执行结果就是<code>(0, 1)</code>。再执行<code>,</code>符他返回了一个<code>1</code>.</li><li>再执行外部的<code>y = y + 1</code>,它们的优先级为<code>+ &gt; =</code>，先执行<code>y + 1</code>再执行<code>y = 2</code>，所以最后<code>y</code>为<code>2</code>。</li></ol><table><thead><tr><th style="text-align:center">优先级</th><th style="text-align:center">运算类型</th><th style="text-align:center">关联性</th><th style="text-align:center">运算符</th></tr></thead><tbody><tr><td style="text-align:center">20</td><td style="text-align:center">圆括号</td><td style="text-align:center">n/a（不相关）</td><td style="text-align:center">( … )</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">后置递增(运算符在后)</td><td style="text-align:center">n/a</td><td style="text-align:center">… ++</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">一元加法</td><td style="text-align:center">从右到左</td><td style="text-align:center">+ …</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">一元加法</td><td style="text-align:center">从右到左</td><td style="text-align:center">… = …</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">赋值</td><td style="text-align:center">从左到右</td><td style="text-align:center">… , …</td></tr></tbody></table><p>下面我们就通过<code>逗号操作符</code>来实现两值交换，通过<code>数组实现</code>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>; <span class="comment">// 初始值 a</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>; <span class="comment">// 初始值 b</span></span><br><span class="line">a = [b, (b = a)][<span class="number">0</span>];</span><br><span class="line"><span class="comment">// a 200</span></span><br><span class="line"><span class="comment">// b 100</span></span><br></pre></td></tr></table></figure><p><code>方法()</code>实现代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>; <span class="comment">// 初始值 a</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>; <span class="comment">// 初始值 b</span></span><br><span class="line">a = b + ((b = a), <span class="number">0</span>);</span><br><span class="line"><span class="comment">// a 200</span></span><br><span class="line"><span class="comment">// b 100</span></span><br></pre></td></tr></table></figure><p><strong>优点实现简洁，更灵活，数组的操作还是容易理解一点，但是”,”操作符不太好了解</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面 5 种方法我们开扩了自己的思路，即复习了<code>ES6</code>也了解<code>执行优先级</code>、<code>按位操作符</code>、<code>,</code>等等。所以是比较有趣的，如果你有更好的解法请留言，大家一起进步。个人认为最好的方法是<code>按位操作符</code>、<code>减法实现</code>是比较好的实现方法。</p>]]></content>
    
    <summary type="html">
    
      在看别人博客时看到一个有趣的关于JavaScript交换变量的方法，有助于开阔思路。
    
    </summary>
    
      <category term="InterviewQuestion" scheme="http://asyncnode.com/categories/InterviewQuestion/"/>
    
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
      <category term="InterviewQuestion" scheme="http://asyncnode.com/tags/InterviewQuestion/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui框架 手写实现一个Ui框架级别的 Menu组件(高级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui-menu-two.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui-menu-two.html</id>
    <published>2020-01-08T02:32:21.000Z</published>
    <updated>2020-06-01T00:18:43.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui框架。本篇文章中从0开始手写一个Ui框架级别的Menu组件。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/HP/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui框架 手写实现一个Ui框架级别的 DropDown(初级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui-menu.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui-menu.html</id>
    <published>2020-01-04T11:30:48.000Z</published>
    <updated>2020-06-01T00:18:43.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui框架。本篇文章中从0开始手写一个Ui框架级别的DropDown组件，为后面的menu组件打下基础。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/HP/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui框架 手写实现一个Ui框架级别的 Selected组件(二)(中级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui-selectedTwo.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui-selectedTwo.html</id>
    <published>2019-12-31T12:41:12.000Z</published>
    <updated>2020-06-01T00:18:43.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui框架。本篇文章中从0开始手写一个Ui框架级别的Selected组件。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/HP/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui框架 手写实现一个Ui框架级别的 Selected组件(一)(中级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui-selected.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui-selected.html</id>
    <published>2019-12-26T10:29:54.000Z</published>
    <updated>2020-06-01T00:18:43.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui框架。本篇文章中从0开始手写一个Ui框架级别的Selected组件。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/HP/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui框架 手写实现一个Ui框架级别的 Input组件/InputNumber(中级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui-Input.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui-Input.html</id>
    <published>2019-12-21T05:56:31.000Z</published>
    <updated>2020-06-01T00:18:43.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui框架。本篇文章中从0开始手写一个Ui框架级别的Input组件/InputNumber组件。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/HP/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui框架 手写实现一个Ui框架级别的 Rate组件(初级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui-rate.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui-rate.html</id>
    <published>2019-12-19T05:56:31.000Z</published>
    <updated>2020-06-01T00:18:43.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui框架。本篇文章中从0开始手写一个Ui框架级别的Rate组件。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/HP/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui框架 手写实现一个Ui框架级别的 Col组件(初级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui-col.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui-col.html</id>
    <published>2019-12-16T07:23:53.000Z</published>
    <updated>2020-06-01T00:18:43.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui框架。本篇文章中从0开始手写一个Ui框架级别的Col组件。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/HP/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui框架 手写实现一个Ui框架级别的 Switch组件(初级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui-switch.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui-switch.html</id>
    <published>2019-12-10T02:32:43.000Z</published>
    <updated>2020-06-01T00:18:43.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui框架。本篇文章中从0开始手写一个Ui框架级别的Switch按钮组件。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/HP/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui框架 手写实现一个Ui框架级别的 Checkbox组件(初级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui-checkbox.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui-checkbox.html</id>
    <published>2019-12-07T11:40:38.000Z</published>
    <updated>2020-06-01T00:18:43.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui框架。本篇文章中从0开始手写一个Ui框架级别的Checkbox组件。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/HP/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui框架 手写实现一个Ui框架级别的 Radio组件(初级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui-radio.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui-radio.html</id>
    <published>2019-12-03T12:43:23.000Z</published>
    <updated>2020-06-01T00:18:43.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui框架。本篇文章中从0开始手写一个Ui框架级别的Radio组件。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/HP/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui框架 手写实现一个Ui框架级别的 Pagination组件(初级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui.pagination.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui.pagination.html</id>
    <published>2019-11-29T08:21:54.000Z</published>
    <updated>2020-06-01T00:18:43.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui框架。本篇文章中从0开始手写一个Ui框架级别的Pagination组件。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/HP/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui框架 手写实现一个Ui框架级别的 Button组件(初级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui-button.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui-button.html</id>
    <published>2019-11-24T13:18:21.000Z</published>
    <updated>2020-06-01T00:18:43.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们开始只关注组件的功能实现，不考虑 css 分装、webpack 配置、整体结构设计、单元测试等等，因为在后面会一步一步完善。让大家一起进步，实现一套简单的组件库。</p><p><code>Button</code>组件也是经常用到的，首先我么也要了解<code>Button</code>都有什么功能，一样的可以参考<code>element/iview</code>中<code>button</code>功能。再结合我们的业务场景定制一些，适合自己项目的通用组件库。最后我们会把写好的 UI 框架库发布到 npm 中。</p><p>本组件的开发步骤和前面<a href="/blog/vue/ui/vue-ui-breadcrumb.html">breadcrumb</a>基本上一至，因为它们都是比较简单的组件，不需要分成多个模块来编写。大致步骤如下：</p><ol><li>分析<code>button</code>组件功能</li><li>构思代码、编写代码</li><li>测试组件效果，(编写单元测试)</li></ol><h2 id="分析组件功能"><a href="#分析组件功能" class="headerlink" title="分析组件功能"></a>分析组件功能</h2><p>首先要明确的了解要写的<code>button</code>组件要包含哪些功能，这样更有利于组件整体的构思和实现。如下图所示：</p><p><img src="../../../images/vue-ui/button-1.png" alt="button"></p><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>在很多<code>ui框架</code>中可以看到它们的<code>button</code>都是有(状态/类型)的，结合自己使用的场景大致分为<code>defalut</code>、<code>primary</code>、<code>success</code>、<code>warning</code>、<code>info</code>、<code>error</code>这个都可以通过通过一个<code>type</code>传入我们的<code>button</code>组件以切换我们组件的状态。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>同时有不同类型的按钮类型比如<code>dashed</code>、<code>ghost</code>、<code>text</code>、<code>icon</code>、<code>round</code>、<code>circle</code>、<code>loading</code>、<code>disabled</code>类型。</p><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><p>支持设置大小<code>lg</code>、<code>md</code>、<code>sm</code>、<code>xs</code></p><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><p>支持路由跳转<code>to</code>,支持<code>replace</code>跳转,支持自动获取原生<code>type</code>属性，同时支持<code>icon</code>传入和自定义<code>icon</code>图标。下面我们就根据上面的的计划一步一步实现功能。</p><p>支持设置<code>html标签</code>为<code>a</code>标签。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先实现简单的<code>type类型</code></p>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui框架。本篇文章中从0开始手写一个Ui框架级别的Button按钮组件。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/HP/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Ui 手写实现以下breadcrumb面包屑组件(初级难度)</title>
    <link href="http://asyncnode.com/blog/vue/ui/vue-ui-breadcrumb.html"/>
    <id>http://asyncnode.com/blog/vue/ui/vue-ui-breadcrumb.html</id>
    <published>2019-11-20T01:42:12.000Z</published>
    <updated>2020-06-01T00:18:43.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们开始只关注组件的功能实现，不考虑 css 分装、webpack 配置、整体结构设计、单元测试等等，因为在后面会一步一步完善。让大家一起进步，实现一套简单的组件库。</p><p>在日常我们开发 PC 页面时经常会用到一个面包屑导航的功能，其实这个功能算是比较简单的功能，基本上用过<code>Vue</code>这个框架的人都能自己写出来。但是既然要写一个通用的可能就不是那么容易实现，我们首先要了解<code>breadcrumb</code>它都有什么功能。下面我们就先分析它都有什么功能，可以参考<code>element/iview</code>这种流行的<code>Ui框架</code>。</p><ol><li>分析<code>breadcrumb</code>组件功能</li><li>构思代码、编写代码</li><li>测试组件效果，(编写单元测试)</li></ol><p>按照上面的三步一步一步的实现自己一个自己<code>breadcrumb</code>组件，废话不多说直接开干。</p><h2 id="分析组件功能"><a href="#分析组件功能" class="headerlink" title="分析组件功能"></a>分析组件功能</h2><p>我们可以去<code>element/iview</code>官方网去阅读一下他们的<a href="https://element.eleme.cn/2.13/#/zh-CN/component/breadcrumb" target="_blank" rel="noopener">文档</a>，在去<code>github</code>中看一下他们的源码。首先看一下他们是怎么使用，下面以<code>element</code>为例。<br><strong>示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-breadcrumb</span> <span class="attr">separator</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb-item</span> <span class="attr">:to</span>=<span class="string">"&#123; path: '/' &#125;"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>活动管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span>活动列表<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span>活动详情<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-breadcrumb</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：<br><img src="../../../images/vue-ui/breadcrumb-1.png" alt="breadcrumb"></p><p>根据上面和代码我们可以看出<code>breadcrumb</code>有两个组件，分别为：</p><p><code>breadcrumb</code>组件，并且它接受两个<code>props</code>属性：</p><ul><li><code>sparator(props)</code>: 它是用来替换默认<code>/</code>分隔符的，并且它的类型为<code>String</code>类型。默认<code>/</code></li><li><code>sparatorClass(props)</code>: 它是用来给填充<code>iconfont</code>这种的图标分隔符，并且它的类型为<code>String</code>类型。没有默认值</li></ul><p><code>breadcrumb-item</code>组件，它是被<code>breadcrumb</code>包裹的组件，它也接受两个<code>props</code>属性：</p><ul><li><code>to(props)</code>: 路由跳转对象，同 <code>vue-router</code> 的 <code>to</code>, 并且它的类型为<code>String/Object</code>类型。没有默认值</li><li><code>replace(props)</code>: 在使用 <code>to</code> 进行路由跳转时，启用 <code>replace</code> 将不会向 <code>history</code> 添加新记录, 类型是<code>Boolean</code>。默认<code>false</code></li></ul><p>我们大致知道了有两个组件，组件之间有嵌套关系，并且分别都支持两个<code>props</code>参数。并且有的<code>props</code>还有默认参数。下面我们就来一步一步实现自己已经知道的功能和配置。</p><h2 id="实现组件"><a href="#实现组件" class="headerlink" title="实现组件"></a>实现组件</h2><p>这里面有两个比较重要的知识点：</p><ul><li><code>breadcrumb-item</code>可以通过<code>slot</code>传入<code>breadcrumb</code>，同时<code>breadcrumb-item</code>中的内容也通过<code>slot</code>传入内容</li><li><code>breadcrumb</code>中接受的两个<code>props</code>怎么传入<code>breadcrumb-item</code>。 当然可以通过<code>props</code>一层一层传入，但是我们要写的好一点，这个里可以通过两种方式实现。<code>provide/inject</code>和<code>this.$children</code>来实现，这两种实现方式分别是<code>element</code>、<code>iview</code>实现方式，个人认为<code>provide/inject</code>更简洁一点。</li></ul><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>一个简单的组件<code>**breadcrumb**</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'breadcrumb'</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 分隔符</span></span></span><br><span class="line">      separator: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">'/'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">// 分隔符</span></span></span><br><span class="line">      separatorClass: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * TODO: 通过provide注入当前组件实例</span><br><span class="line"><span class="javascript">     * @<span class="keyword">return</span> &#123;<span class="built_in">Object</span>&#125; 返回一个对象</span></span><br><span class="line">     */</span><br><span class="line">    provide() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        breadcrumbEl: <span class="keyword">this</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">::after</span>,</span></span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">      content: '';</span><br><span class="line">      display: table;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">      clear: both;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.breadcrumb</span> &#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 1;</span><br><span class="line"><span class="css">    @<span class="keyword">extend</span> .clearfix;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另一个组件<code>**breadcrumb-item**</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">"['breadcrumb-inner']"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"breadcrumb-separator"</span>&gt;</span></span><br><span class="line">      &#123;&#123; separator &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'breadcrumbItem'</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 跳转路径</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// eslint-disable-next-line vue/require-default-prop</span></span></span><br><span class="line"><span class="javascript">      to: [<span class="built_in">String</span>, <span class="built_in">Object</span>],</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否使用repalce替换push跳转</span></span></span><br><span class="line"><span class="javascript">      replace: <span class="built_in">Boolean</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// <span class="doctag">TODO:</span> 接受父组件传入的 分隔符</span></span></span><br><span class="line"><span class="javascript">        separator: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// <span class="doctag">TODO:</span> 接受父组件传入的 分隔符 class</span></span></span><br><span class="line"><span class="javascript">        separatorClass: <span class="string">''</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// <span class="doctag">TODO:</span> 通过inject接受父组件注入的对象</span></span></span><br><span class="line"><span class="javascript">    inject: [<span class="string">'breadcrumbEl'</span>],</span></span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.separator = <span class="keyword">this</span>.breadcrumbEl.separator;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.separatorClass = <span class="keyword">this</span>.breadcrumbEl.separatorClass;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'this.breadcrumbEl: '</span>, <span class="keyword">this</span>.breadcrumbEl);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.breadcrumb</span> &#123;</span></span><br><span class="line"><span class="css">    @<span class="keyword">at</span>-<span class="keyword">root</span> #&#123;&amp;&#125;<span class="selector-tag">-item</span> &#123;</span></span><br><span class="line">      float: left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    @<span class="keyword">at</span>-<span class="keyword">root</span> #&#123;&amp;&#125;<span class="selector-tag">-separator</span> &#123;</span></span><br><span class="line">      margin: 0 9px;</span><br><span class="line">      font-weight: 700;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#c0c4cc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到此我们至少实现了基本的功能，如下图所示：<br><img src="../../../images/vue-ui/breadcrumb-2.png" alt="breadcrumb"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>但是我们观察这个图片可以看到，我们还是有一部分功能没有实现，如下几点：</p><ul><li>组件的后面多了一个<code>/</code></li><li>当前的组件不能跳转，增加跳转</li><li>添加属性无障碍阅读</li></ul><p>我们在<code>breadcrumb</code>组件中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增代码</span></span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="comment">// 获取所有的面包屑子项</span></span><br><span class="line">  <span class="keyword">const</span> items = <span class="keyword">this</span>.$el.querySelectorAll(<span class="string">'.breadcrumb-item'</span>)</span><br><span class="line">  <span class="comment">// 判断子节点的长度</span></span><br><span class="line">  <span class="keyword">if</span> (items.length) &#123;</span><br><span class="line">    <span class="comment">// 如果最后一个添加aria 属性</span></span><br><span class="line">    items[items.length - <span class="number">1</span>].setAttribute(<span class="string">'aria-current'</span>, <span class="string">'page'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>breadcrumb-item</code>组件中添加如下代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">"link"</span> <span class="attr">:class</span>=<span class="string">"['breadcrumb-inner', to ? 'is-link': '']"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">"separatorClass"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"breadcrumb-separator"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">"separatorClass"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"breadcrumb-separator"</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span></span><br><span class="line">      &#123;&#123; separator &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'breadcrumbItem'</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 跳转路径</span></span></span><br><span class="line"><span class="javascript">      to: [<span class="built_in">String</span>, <span class="built_in">Object</span>],</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否使用repalce替换push跳转</span></span></span><br><span class="line"><span class="javascript">      replace: <span class="built_in">Boolean</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// <span class="doctag">TODO:</span> 接受父组件传入的 分隔符</span></span></span><br><span class="line"><span class="javascript">        separator: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// <span class="doctag">TODO:</span> 接受父组件传入的 分隔符 class</span></span></span><br><span class="line"><span class="javascript">        separatorClass: <span class="string">''</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// <span class="doctag">TODO:</span> 通过inject接受父组件注入的对象</span></span></span><br><span class="line"><span class="javascript">    inject: [<span class="string">'breadcrumbEl'</span>],</span></span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.separator = <span class="keyword">this</span>.breadcrumbEl.separator;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.separatorClass = <span class="keyword">this</span>.breadcrumbEl.separatorClass;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取当前Link实例</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> linkEl = <span class="keyword">this</span>.$refs.link;</span></span><br><span class="line"><span class="javascript">      linkEl.setAttribute(<span class="string">'role'</span>, <span class="string">'link'</span>);</span></span><br><span class="line"><span class="javascript">      linkEl.addEventListener(<span class="string">'click'</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> &#123; to, replace, $router &#125; = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 判断是否传入to 是否存在$router不存在直接返回</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!to || !$router) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 根据replace的值，调用push or replace</span></span></span><br><span class="line">        replace ? $router.replace(to) : $router.push(to);</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'this.breadcrumbEl: '</span>, <span class="keyword">this</span>.breadcrumbEl);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.breadcrumb</span> &#123;</span></span><br><span class="line"><span class="css">    @<span class="keyword">at</span>-<span class="keyword">root</span> #&#123;&amp;&#125;<span class="selector-tag">-item</span> &#123;</span></span><br><span class="line">      float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    @<span class="keyword">at</span>-<span class="keyword">root</span> #&#123;&amp;&#125;<span class="selector-tag">-separator</span> &#123;</span></span><br><span class="line">      margin: 0 9px;</span><br><span class="line">      font-weight: 700;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#c0c4cc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    @<span class="keyword">at</span>-<span class="keyword">root</span> #&#123;&amp;&#125;<span class="selector-tag">-inner</span> &#123;</span></span><br><span class="line"><span class="css">      &amp;<span class="selector-class">.is-link</span><span class="selector-pseudo">:hover</span>,</span></span><br><span class="line"><span class="css">      &amp; <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#409eff</span>;</span></span><br><span class="line">        cursor: pointer;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    &amp; <span class="selector-class">.breadcrumb-item</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.breadcrumb-separator</span> &#123;</span></span><br><span class="line">        display: none;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们通过<code>breadcrumb-item:last-child</code>把最后一个<code>/</code>隐藏掉。<br>我们通过获取<code>this.$refs.link</code>实例，设置无障碍阅读<code>role</code>属性，设置无障碍阅读。并且绑定跳转事件，根据传入的<code>repalce</code>属性判断跳转方式。<br>到此我们就实现了一个自己可用的<code>Breadcrum</code>组件。</p><p>在线代码：</p><iframe src="https://codesandbox.io/embed/awesome-worker-wvecw?fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="awesome-worker-wvecw" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本篇文章中即实现了自己的 ui 组件<code>breadcrumb</code>，又学习了两个比较常用的<code>Vue</code>知识点。如果不了解<a href="https://cn.vuejs.org/v2/api/?#slot" target="_blank" rel="noopener">solt</a>可以去看<code>vue</code>官方文档。另一个<a href="https://cn.vuejs.org/v2/api/?#provide-inject" target="_blank" rel="noopener">provide/inject</a>它类似于<code>react</code>中的<code>context</code>，如果想了解<code>vue</code>中其他好玩的<code>属性</code>、<code>内置组件</code>、<code>修饰符</code>可以关注我。</p>]]></content>
    
    <summary type="html">
    
      在日常开发中会用到很多Ui框架，本系列文章会从简单到复杂实现一套自己Ui。本篇文章中从0开始手写一个面包屑组件breadcrumb。
    
    </summary>
    
      <category term="HP" scheme="http://asyncnode.com/categories/HP/"/>
    
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
      <category term="HP" scheme="http://asyncnode.com/tags/HP/"/>
    
  </entry>
  
  <entry>
    <title>setTimeout实现原理和EventLoop的关系</title>
    <link href="http://asyncnode.com/blog/javascript/eventloop/mode_setTimeout.html"/>
    <id>http://asyncnode.com/blog/javascript/eventloop/mode_setTimeout.html</id>
    <published>2019-11-14T11:32:12.000Z</published>
    <updated>2020-06-01T00:18:43.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://mp.weixin.qq.com/s/GI6entTJl2EtP5rRzmQFTw" target="_blank" rel="noopener">setTimeout 的实现原理和使用注意</a></p>]]></content>
    
    <summary type="html">
    
      setTimeout实现原理和EventLoop的关系
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/JavaScript/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
      <category term="Principle" scheme="http://asyncnode.com/tags/Principle/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列 ———— 单例模式和设计模式的作用</title>
    <link href="http://asyncnode.com/blog/design-patterns/docs/mode_simple_des.html"/>
    <id>http://asyncnode.com/blog/design-patterns/docs/mode_simple_des.html</id>
    <published>2019-11-09T14:12:54.000Z</published>
    <updated>2020-06-01T00:18:43.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://mp.weixin.qq.com/s/7QDxcAVFmLVGbKGdtE7dRg" target="_blank" rel="noopener">深入理解 JavaScript 的设计模式</a></p>]]></content>
    
    <summary type="html">
    
      介绍设计模式的作用和比较简单的单例模式
    
    </summary>
    
      <category term="DesignPatterns" scheme="http://asyncnode.com/categories/DesignPatterns/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/DesignPatterns/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="DesignPatterns" scheme="http://asyncnode.com/tags/DesignPatterns/"/>
    
  </entry>
  
  <entry>
    <title>lighthouse的使用</title>
    <link href="http://asyncnode.com/blog/monitor/perfromance/performance-lighthouse.html"/>
    <id>http://asyncnode.com/blog/monitor/perfromance/performance-lighthouse.html</id>
    <published>2019-11-03T02:20:42.000Z</published>
    <updated>2020-06-01T00:18:43.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://mp.weixin.qq.com/s/EuFDLOCg53IxvieaQDeYug" target="_blank" rel="noopener">网易云音乐前端性能监控实践</a></p>]]></content>
    
    <summary type="html">
    
      lighthouse的使用
    
    </summary>
    
      <category term="Perfromance" scheme="http://asyncnode.com/categories/Perfromance/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/Perfromance/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="Browser" scheme="http://asyncnode.com/tags/Browser/"/>
    
      <category term="Perfromance" scheme="http://asyncnode.com/tags/Perfromance/"/>
    
  </entry>
  
  <entry>
    <title>typeScript中的interface</title>
    <link href="http://asyncnode.com/blog/typescript/docs/typeScript_decorator.html"/>
    <id>http://asyncnode.com/blog/typescript/docs/typeScript_decorator.html</id>
    <published>2019-10-30T04:52:54.000Z</published>
    <updated>2020-06-01T00:18:43.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://mp.weixin.qq.com/s/06iBhb4ye6-1cAxgLX7ybA" target="_blank" rel="noopener">TypeScript 真香系列——接口篇</a></p>]]></content>
    
    <summary type="html">
    
      学习TypeScript
    
    </summary>
    
      <category term="TypeScript" scheme="http://asyncnode.com/categories/TypeScript/"/>
    
      <category term="未完成" scheme="http://asyncnode.com/categories/TypeScript/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
    
      <category term="TypeScript" scheme="http://asyncnode.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>react中使用useState</title>
    <link href="http://asyncnode.com/blog/react/hooks/react-useState.html"/>
    <id>http://asyncnode.com/blog/react/hooks/react-useState.html</id>
    <published>2019-10-24T02:23:53.000Z</published>
    <updated>2020-06-01T00:18:43.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://mp.weixin.qq.com/s/ydApE7akeJ0VO3R1r365mQ" target="_blank" rel="noopener">简单易懂的 React useState() Hook 指南（长文建议收藏）</a></p>]]></content>
    
    <summary type="html">
    
      react中使用useState
    
    </summary>
    
      <category term="Hooks" scheme="http://asyncnode.com/categories/Hooks/"/>
    
    
      <category term="React" scheme="http://asyncnode.com/tags/React/"/>
    
      <category term="Hooks" scheme="http://asyncnode.com/tags/Hooks/"/>
    
  </entry>
  
</feed>
