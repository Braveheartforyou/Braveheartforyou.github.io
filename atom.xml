<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>asyncnode</title>
  
  <subtitle>asyncnode</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://asyncnode.com/"/>
  <updated>2018-11-13T08:48:55.294Z</updated>
  <id>http://asyncnode.com/</id>
  
  <author>
    <name>Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>object_2</title>
    <link href="http://asyncnode.com//blog/object-2.html"/>
    <id>http://asyncnode.com//blog/object-2.html</id>
    <published>2018-05-03T09:03:44.000Z</published>
    <updated>2018-11-13T08:48:55.294Z</updated>
    
    <summary type="html">
    
      Object基本上是JavaScript中最重要的一个了(=)
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/categories/JavaScript/ECMAScript6/"/>
    
      <category term="Object" scheme="http://asyncnode.com/categories/JavaScript/ECMAScript6/Object/"/>
    
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/tags/ECMAScript6/"/>
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
      <category term="Object" scheme="http://asyncnode.com/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>sass_Package</title>
    <link href="http://asyncnode.com//blog/sass-Package.html"/>
    <id>http://asyncnode.com//blog/sass-Package.html</id>
    <published>2018-01-25T05:45:50.000Z</published>
    <updated>2018-11-13T08:48:55.295Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在开发前端中的一些注意事项</title>
    <link href="http://asyncnode.com//blog/Precautions.html"/>
    <id>http://asyncnode.com//blog/Precautions.html</id>
    <published>2017-12-28T07:00:19.000Z</published>
    <updated>2018-11-13T08:48:55.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>其实很多时候发现很多别人遗留的代码，不是他写不好或者什么，而是没时间，时间不够的时候自己只能用自己比较顺手的写法去写，但是一定要有一个人去管理整个公司的前端技术栈，不然真的是一团乱，</p>]]></content>
    
    <summary type="html">
    
      在开发中有很多技术上的坑是可以百度，google或者stackoverflow能过解决，但是很多时候整个前端项目的管理，都是和个人风格有很大的关系，甚至和整个公司的技术架构有很大的关系，有很多的事情我们没有权利去解决，但是至少能管理好自己的代码。
    
    </summary>
    
      <category term="踩坑记" scheme="http://asyncnode.com/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    
    
      <category term="踩坑记" scheme="http://asyncnode.com/tags/%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>运算符优先级</title>
    <link href="http://asyncnode.com//blog/JavaScript-Operator-priority.html"/>
    <id>http://asyncnode.com//blog/JavaScript-Operator-priority.html</id>
    <published>2017-11-28T07:56:23.000Z</published>
    <updated>2018-11-13T08:48:55.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span> <span class="comment">// 7</span></span><br></pre></td></tr></table></figure></p><p><font color="red"></font><br>乘法运算符 (“<font color="red">*</font>“)比起加法运算符(“<font color="red">+</font>“)有着更高的优先级，所以它会被最先执行。</p><h3 id="结合性"><a href="#结合性" class="headerlink" title="结合性"></a>结合性</h3><p>结合性决定了拥有相同优先级的运算符的执行顺序。考虑下面这个表达式：</p><ul><li>左结合<br>左结合(从左到右计算)相当于把左边的子表达式加上小括号(a OP b) OP c</li><li>右关联<br>(从右到左计算)相当于a OP (b OP c)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li></ul><p>结果 a 和 b 的值都会成为5。这是因为赋值运算符的返回结果就是赋值运算符右边的那个值，具体过程是：b被赋值为5，然后a也被赋值为 b=5 的返回值，也就是5。</p><h3 id="汇总表"><a href="#汇总表" class="headerlink" title="汇总表"></a>汇总表</h3><p>下面的表将所有运算符按照优先级的不同从高到低排列。<br>可以查看 mdn中的 table来分他的等级。<br>参考&gt;<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</a></p>]]></content>
    
    <summary type="html">
    
      在JavaScript中运算符是有明确的有限级的，如*运算符比+运算符的优先级高，如果想让+运算符的优先级超过*运算符，可以在+外层嵌套一个()符号，他的优先级就是高于*运算符的
    
    </summary>
    
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/tags/ECMAScript6/"/>
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的作用域和作用域链</title>
    <link href="http://asyncnode.com//blog/javascript-scope.html"/>
    <id>http://asyncnode.com//blog/javascript-scope.html</id>
    <published>2017-11-07T02:28:32.000Z</published>
    <updated>2018-11-13T08:48:55.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p><font color="red"></font><br>在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下几种情形拥有全局作用域：</p><h3 id="最外层的函数、变量拥有全局作用域"><a href="#最外层的函数、变量拥有全局作用域" class="headerlink" title="最外层的函数、变量拥有全局作用域"></a>最外层的函数、变量拥有全局作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sGl = <span class="string">'全局变量'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fGL</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _sGl = <span class="string">'局部变量'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(_sGl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sGl); <span class="comment">// 全局变量</span></span><br><span class="line">fGL(); <span class="comment">// 局部变量</span></span><br></pre></td></tr></table></figure><h3 id="没有使用var关键字声明的变量也都是全局变量。"><a href="#没有使用var关键字声明的变量也都是全局变量。" class="headerlink" title="没有使用var关键字声明的变量也都是全局变量。"></a>没有使用var关键字声明的变量也都是全局变量。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    name = <span class="string">"全局变量"</span>;</span><br><span class="line">    alert(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 输出:全局变量</span></span><br></pre></td></tr></table></figure><h3 id="所有window对象的属性拥有全局作用域"><a href="#所有window对象的属性拥有全局作用域" class="headerlink" title="所有window对象的属性拥有全局作用域"></a>所有window对象的属性拥有全局作用域</h3><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>词法作用域：<font color="red">函数在定义它们的作用域里运行，而不是在执行它们的作用域里运行。</font>也就是说词法作用域取决于源码，通过静态分析就能确定，因此<font color="red">词法作用域也叫做静态作用域</font><br>在通常情况下，变量的查询从最近接的绑定上下文开始，向外部逐渐扩展，直到查询到第一个绑定，一旦完成查找就结束搜索。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gl = <span class="string">'全局变量'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fGl</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gl = <span class="string">'局部变量'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(gl);</span><br><span class="line">&#125;</span><br><span class="line">fGl(); <span class="comment">// 局部变量</span></span><br></pre></td></tr></table></figure></p><h2 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h2><p>在编程实践中，最容易低估和过度滥用的概念就是动态作用域，因为很少有语言支持这种方式为绑定解析方案。</p><p>动态作用域与词法作用域相对而言的，不同于词法作用域在定义时确定，<font color="red">动态作用域在执行时确定，其生存周期到代码片段执行为止</font>。动态变量存在于动态作用域中，<font color="red">任何给定的绑定的值，在确定调用其函数之前，都是不可知的</font>。</p><p>在代码执行时，对应的作用域链常常是保持静态的。然而当遇到with语句、call方法、apply方法和try-catch中的catch时，会改变作用域链的。以with为例，在遇到with语句时，会将传入的对象属性作为局部变量来显示，使其便于访问，也就是说把一个新的对象添加到了作用域链的顶端，这样必然影响对局部标志符的解析。<font color="red">当with语句执行完毕后，会把作用域链恢复到原始状态</font>。实例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"global"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用with之前</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 输出:global</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span>(&#123;<span class="attr">name</span>:<span class="string">"jeri"</span>&#125;)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// 输出:jeri</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用with之后，作用域链恢复</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 输出:global</span></span><br></pre></td></tr></table></figure></p><p>在作用域链中有动态作用域时，this引用也会变得更加复杂，不再指向第一次创建时的上下文，而是由调用者确定。比如在使用apply或call方法时，传入它们的第一个参数就是被引用的对象。实例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">globalThis</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">globalThis(); <span class="comment">// 输出:Window &#123;document: document,external: Object…&#125;</span></span><br><span class="line">globalThis.call(&#123;<span class="attr">name</span>:<span class="string">"jeri"</span>&#125;); <span class="comment">// 输出:Object &#123;name: "jeri"&#125;</span></span><br><span class="line">globalThis.apply(&#123;<span class="attr">name</span>:<span class="string">"jeri"</span>&#125;,[]); <span class="comment">// 输出:Object &#123;name: "jeri"&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>函数作用域，顾名思义就是在定义函数时候产生的作用域，这个作用域也可以称为<font color="red">局部作用域</font>。和全局作用域相反，函数作用域一般只在函数的代码片段内可访问到，外部不能进行变量访问。在函数内部定义的变量存在于函数作用域中，其生命周期随着函数的执行结束而结束。实例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"global"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"jeri"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// 输出:jeri</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> (&#123;<span class="attr">name</span>:<span class="string">"with"</span>&#125;) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name); <span class="comment">// 输出:with</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// 输出:jeri</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能访问函数作用域</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 输出:global</span></span><br></pre></td></tr></table></figure></p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>在JavaScript中，<font color="red">函数也是对象</font>，实际上，JavaScript里<font color="red">一切</font>都是<font color="red">对象</font>。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供JavaScript引擎访问的内部属性。其中一个内部属性是<font color="red">[[Scope]]</font>，由ECMA-262标准第三版定义，该内部属性包含了<font color="red">函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链</font>，<font color="red">它决定了哪些数据能被函数访问</font>。<font color="red">它用来保证对执行环境有权访问的变量和函数的有序访问</font>。<br>当一个函数创建后，它的作用域会被创建此函数的作用域中可访问的数据对象填充<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = num1 + num2;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="../images/scope/scope1.jpg" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = add(<span class="number">5</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>执行此函数时会创建一个称为“运行期上下文(execution context)”的内部对象，运行期上下文定义函数执行的环境。每个运行期上下文都有自己的作用域链，用于标识符解析，当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。<br>这些值按照它们出现在函数中的顺序被复制到运行期的上下文的作用域中，它们共同组成一个新的对象，叫“活动对象(activation object)”,该对象包含了函数的所有局部变量、命名参数、参数集合以及this,然后此对象会被推入作用域链前端，当运行期上下文被销毁时，活动对象也随之销毁。<br><img src="../images/scope/scope2.jpg" alt=""><br>在全局作用域中创建的函数,其作用域链会自动成为作用域中的一员。而当函数执行时,其活动对象就会成为作用域中的第一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// output:global</span></span><br><span class="line">    name = <span class="string">"change"</span>;</span><br><span class="line">    <span class="comment">// 函数内部可以修改全局变量</span></span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// output:change</span></span><br><span class="line">    <span class="comment">// 先查询活动对象</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="string">"18"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age); <span class="comment">// output:18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数执行完毕，执行环境销毁</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// output:Uncaught ReferenceError: age is not defined</span></span><br></pre></td></tr></table></figure></p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是JavaScript的一个比较重要的东西，关于这个问题有很多文章进行讲述，然而依然有相当数量的程序员对这个概念理解不透彻，我就是其中一个，闭包报的官方定义为：<font style="font-weight: bold;">一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也该是表达式的一部分</font>。<br>一句话概括就是：<font style="font-weight: bold; color: red">闭包就是一个函数，捕获作用域内的外部绑定</font>。这些绑定是为之后使用而被绑定，即使作用域已经销毁。</p><h3 id="自由变量"><a href="#自由变量" class="headerlink" title="自由变量"></a>自由变量</h3><p><font style="font-weight: bold;">自由变量与闭包的关系是，自由变量闭合于闭包的创建</font>。闭包背后的逻辑是，如果一个函数内部有其他函数，那么这些内部函数可以访问在这个外部函数中声明的变量（这些变量就称之为自由变量）。然而，这些变量可以被内部函数捕获，从高阶函数（返回另一个函数的函数称为高阶函数）中return语句实现“越狱”，以供以后使用。内部函数在没有任何局部声明之前（既不是被传入，也不是局部声明）使用的变量就是被捕获的变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAdder</span>(<span class="params">captured</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">free</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = free + captured;</span><br><span class="line">        <span class="built_in">console</span>.log(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add10 = makeAdder(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">add10(<span class="number">2</span>); <span class="comment">// 输出:12</span></span><br></pre></td></tr></table></figure></p><p>从上例可知，外部函数中的变量captured被执行加法的返回函数捕获，内部函数从未声明过captured变量，却可以引用它。<br>如果我们再创建一个加法器将捕获到同名变量captured，但有不同的值，因为这个加法器是在调用makeAdder之后被创建：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add16 = makeAdder(<span class="number">16</span>);</span><br><span class="line">add16(<span class="number">18</span>); <span class="comment">// 输出:34</span></span><br><span class="line">add10(<span class="number">10</span>); <span class="comment">// 输出:20</span></span><br></pre></td></tr></table></figure></p><p>每一个新的加法器函数都保留了自己创建时捕获的captured实例。</p><h3 id="变量遮蔽"><a href="#变量遮蔽" class="headerlink" title="变量遮蔽"></a>变量遮蔽</h3><p><font style="font-weight: bold"> </font><br>在JavaScript中，当变量在一定作用域内声明，然后在另一个同名变量在一个较低的作用域声明，会发生<font style="font-weight: bold">变量的遮蔽</font>。实例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"jeri"</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"tom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">glbShadow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"fun"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// 输出:fun</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">glbShadow();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 输出:tom</span></span><br></pre></td></tr></table></figure></p><p>当在一个变量同一作用域内声明了多次时，最后一次声明会生效，会遮蔽以前的声明。</p><p>变量声明的遮蔽很好理解，然而<font style="font-weight: bold">函数参数的遮蔽就略显复杂</font>。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shadowed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">argShadow</span>(<span class="params">shadowed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = [<span class="string">"Value is"</span>,shadowed].join(<span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">argShadow(<span class="number">108</span>); <span class="comment">// output:Value is 108</span></span><br><span class="line"></span><br><span class="line">argShadow(); <span class="comment">// output:Value is</span></span><br></pre></td></tr></table></figure></p><p>函数argShadow的参数shadowed覆盖了全局作用域内的同名变量。即使没有传递任何参数，仍然绑定的是shadowed，并没有访问到全局变量shadowed = 0。</p><p><font style="font-weight: bold">任何情况下，离得最近的变量绑定优先级最高</font>。实例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shadowed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">varShadow</span>(<span class="params">shadowed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> shadowed = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">var</span> str = [<span class="string">"Value is"</span>,shadowed].join(<span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">varShadow(<span class="number">108</span>); <span class="comment">// output:Value is 123</span></span><br><span class="line"></span><br><span class="line">varShadow(); <span class="comment">// output:Value is 123</span></span><br></pre></td></tr></table></figure></p><p>varShadow(108)打印出来的并不是108而是123，即使没有参数传入也是打印的123，先访问离得最近的变量绑定。<br>遮蔽变量同样发生在闭包内部，实例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">captureShadow</span>(<span class="params">shadowed</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(shadowed); <span class="comment">// output:108</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">shadowed</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(shadowed); <span class="comment">// output:2</span></span><br><span class="line">        <span class="keyword">var</span> ret = shadowed + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(ret); <span class="comment">// output:3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closureShadow = captureShadow(<span class="number">108</span>);</span><br><span class="line"></span><br><span class="line">closureShadow(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><p>典型的误区<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        ret[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> test0 = test()[<span class="number">0</span>]();</span><br><span class="line"><span class="built_in">console</span>.log(test0); <span class="comment">// 输出：5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test1 = test()[<span class="number">1</span>]();</span><br><span class="line"><span class="built_in">console</span>.log(test1); <span class="comment">//输出：5</span></span><br></pre></td></tr></table></figure></p><p>从上面的例子可知，test这个函数执行之后返回一个函数数组，表面上看数组内的每个函数都应该返回自己的索引值，然而并不是如此。当外部函数执行完毕后，外部函数虽然其执行环境已经销毁，但闭包依然保留着对其中变量绑定的引用，仍然驻留在内存之中。当外部函数执行完毕之后，才会执行内部函数，而这时内部函数捕获的变量绑定已经是外部函数执行之后的最终变量值了，所以这些函数都引用的是同一个变量i=5。<br>另一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);  </span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每隔1秒输出一个5</span></span><br></pre></td></tr></table></figure></p><p>按照我们的推断，上例应该输出1,2,3,4,5。然而，事实上输出的是连续5个5。为什么出现这种诡异的状况呢？其本质上还是由闭包特性造成的，闭包可以捕获外部作用域的变量绑定。<br>上面这个函数片段在执行时，其内部函数和外部函数并不是同步执行的，因为当调用setTimeout时会有一个延时事件排入队列，等所有同步代码执行完毕后，再依次执行队列中的延时事件，而这个时候 i 已经 是5了。</p><p>那怎么解决这个问题呢？我们是不是可以在每个循环执行时，给内部函数传进一个变量的拷贝，使其在每次创建闭包时，都捕获一个变量绑定。因为我们每次传参不同，那么每次捕获的变量绑定也是不同的，也就避免了最后输出5个5的状况。实例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j);</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>闭包具有非常强大的功能，函数内部可以引用外部的参数和变量，但其参数和变量不会被垃圾回收机制回，常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。但，闭包也是javascript语言的一大特点，主要应用闭包场合为：<font style="font-weight: bold">设计私有的方法和变量</font>。 </p><h3 id="模拟私有变量"><a href="#模拟私有变量" class="headerlink" title="模拟私有变量"></a>模拟私有变量</h3><p>从上文的叙述我们知道，变量的捕获发生在创建闭包的时候，那么我们可以把闭包捕获到的变量做为私有变量。实例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> closureDemo = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> PRIVATE = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            inc: <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> PRIVATE += n;</span><br><span class="line">            &#125;,</span><br><span class="line">            dec: <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> PRIVATE -= n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    <span class="keyword">var</span> testInc = closureDemo.inc(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(testInc); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> testDec = closureDemo.dec(<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(testDec); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    closureDemo.div = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRIVATE/n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> testDiv = closureDemo.div(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(testDiv);</span><br><span class="line"><span class="comment">//输出：Uncaught ReferenceError: PRIVATE is not defined</span></span><br></pre></td></tr></table></figure></p><p>自执行函数closureDemo执行完毕之后，自执行函数作用和PRIVATE变量随之销毁，但PRIVATE仍滞留在内存中，也就是加入了到了closureDemo.inc和closureDemo.dec的作用域链中，闭包也就完成了变量捕获。但之后新加入的closureDemo.div并不能在作用域中继续寻找到PRIVATE了。因为，函数只有被调用时才会执行函数里面的代码，变量的捕获也只发生在创建闭包时，所以之后新加入的div方法并不能捕获PRIVATE。</p><h3 id="创建特权方法"><a href="#创建特权方法" class="headerlink" title="创建特权方法"></a>创建特权方法</h3><p>通过闭包我们可以创建私有作用域，那么也就可以创建私有变量和私有函数。创建私有函数的方式和声明私有变量方法一致，只要在函数内部声明函数就可以了。当然，既然可以模拟私有变量和私有函数，我们也可以利用闭包这个特性，创建特权方法。实例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 私有变量和私有函数</span></span><br><span class="line">    <span class="keyword">var</span> privateVar = <span class="number">10</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateFun</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    MyObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    MyObj.prototype.pubulicMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        privateVar ++;</span><br><span class="line">        <span class="keyword">return</span> privateFun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>上面这个实例创建了一个私有作用域，并封装了一个构造函数和对应的方法。需要注意的是在上面的实例中，在声明MyObj这个函数时，使用的是不带var的函数表达式，我们希望产生的是一个全局函数而不是局部的，不然我们依然在外部无法访问。所以，MyObj就成为了一个全局变量，能够在外部进行访问，我们在原型上定义的方法publicMethod也就可以使用，通过这个方法我们也就可以访问私有函数和私有变量了。</p><p>本文引用 &gt;<a href="http://www.cnblogs.com/syfwhu/p/4839562.html" target="_blank" rel="noopener">http://www.cnblogs.com/syfwhu/p/4839562.html</a> (感觉作者挺可爱的)</p>]]></content>
    
    <summary type="html">
    
      JavaScript没有块级作用域,我们比较熟知的就是函数级作用域
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>在JavaScript中只有固定的值会转为false</title>
    <link href="http://asyncnode.com//blog/javascript-IF-False-options.html"/>
    <id>http://asyncnode.com//blog/javascript-IF-False-options.html</id>
    <published>2017-11-03T05:13:39.000Z</published>
    <updated>2018-11-13T08:48:55.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><!-- <font color="red"></font> --><p>在JavaScript中使用if的时候，自己如果不注意的话很可能出现判断进错，其实在JavaScript中只有<font color="red">固定的几个值会转为false，其它的统一认为为true。</font></p><ul><li><font color="red">false</font></li><li><font color="red">null</font></li><li><font color="red">undefined</font></li><li><font color="red">空字符串’ ‘</font></li><li><font color="red">数字零 0</font></li><li><font color="red">NaN</font><br>其他的全部都算为true,<font color="red">‘false’</font>、<font color="red">‘0’</font>也是为true,其实这也是一种隐性的类型转换。和 == 又有不同。</li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>由于逻辑表达式是<font color="red">从左往右</font>计算的，由于运算符优先级的存在，下面的表达式的结果却不相同。如下例所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> &amp;&amp; <span class="literal">true</span>  || <span class="literal">true</span>      <span class="comment">// 结果为 true</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; (<span class="literal">true</span> || <span class="literal">true</span>)     <span class="comment">// 结果为 false</span></span><br></pre></td></tr></table></figure></p><p>右侧被小括号括起来的操作变成了独立的表达式。</p><p><font color="red">转换规则</font>:</p><ul><li>将 AND  转换为 OR</li><li>将 OR 转换为 AND</li><li>删除嵌套的 AND</li><li>删除嵌套的 OR<br>可参考&gt;<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_Operators" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_Operators</a><h3 id="逻辑与-amp-amp"><a href="#逻辑与-amp-amp" class="headerlink" title="逻辑与(&amp;&amp;)"></a>逻辑与(&amp;&amp;)</h3><font color="red"></font><br>尽管 &amp;&amp; 和 || 运算符能够使用<font color="red">非布尔值</font>的操作数, 但它们依然被看作是<font color="red">布尔操</font>作符，因为它们的返回值总是能够被转换为<font color="red">布尔值</font>。<br>expr1 &amp;&amp; expr2<br>如果<font color="red">expr1</font>能转换为<font color="red">false</font>则返回<font color="red">expr1</font>,否则返回<font color="red">expr2</font>。因此，与布尔值一起使用时，如果<font color="red">两个</font>操作数都为<font color="red">true</font>时<font color="red">&amp;&amp;</font>返回<font color="red">true</font>,否则返回<font color="red">false</font>.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a1=<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>       <span class="comment">// t &amp;&amp; t 结果为 true</span></span><br><span class="line">a2=<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>      <span class="comment">// t &amp;&amp; f 结果为 false</span></span><br><span class="line">a3=<span class="literal">false</span> &amp;&amp; <span class="literal">true</span>      <span class="comment">// f &amp;&amp; t 结果为 false</span></span><br><span class="line">a4=<span class="literal">false</span> &amp;&amp; (<span class="number">3</span> == <span class="number">4</span>)  <span class="comment">// f &amp;&amp; f 结果为 false</span></span><br><span class="line">a5=<span class="string">"Cat"</span> &amp;&amp; <span class="string">"Dog"</span>     <span class="comment">// t &amp;&amp; t 结果为 Dog</span></span><br><span class="line">a6=<span class="literal">false</span> &amp;&amp; <span class="string">"Cat"</span>     <span class="comment">// f &amp;&amp; t 结果为 false</span></span><br><span class="line">a7=<span class="string">"Cat"</span> &amp;&amp; <span class="literal">false</span>     <span class="comment">// t &amp;&amp; f 结果为 false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与(||)"></a>逻辑与(||)</h3><p>expr1 &amp;&amp; expr2<br>如果<font color="red">expr1</font>能转换为<font color="red">true</font>则返回<font color="red">expr1</font>,否则返回<font color="red">expr2</font>。因此，与布尔值一起使用时，如果<font color="red">任意一个</font>操作数为<font color="red">true</font>时<font color="red">||</font>返回<font color="red">true</font>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">o1=<span class="literal">true</span> || <span class="literal">true</span>       <span class="comment">// t || t 结果为 true</span></span><br><span class="line">o2=<span class="literal">false</span> || <span class="literal">true</span>      <span class="comment">// f || t 结果为 true</span></span><br><span class="line">o3=<span class="literal">true</span> || <span class="literal">false</span>      <span class="comment">// t || f 结果为 true</span></span><br><span class="line">o4=<span class="literal">false</span> || (<span class="number">3</span> == <span class="number">4</span>)  <span class="comment">// f || f 结果为 false</span></span><br><span class="line">o5=<span class="string">"Cat"</span> || <span class="string">"Dog"</span>     <span class="comment">// t || t 结果为 Cat</span></span><br><span class="line">o6=<span class="literal">false</span> || <span class="string">"Cat"</span>     <span class="comment">// f || t 结果为 Cat</span></span><br><span class="line">o7=<span class="string">"Cat"</span> || <span class="literal">false</span>     <span class="comment">// t || f 结果为 Cat</span></span><br></pre></td></tr></table></figure></p><h3 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非(!)"></a>逻辑非(!)</h3><p>!expr    如果单个表达式能转换为<font color="red">true</font>的话返回<font color="red">false</font>，否则返回<font color="red">true</font>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n1=!<span class="literal">true</span>              <span class="comment">// !t 结果为 false</span></span><br><span class="line">n2=!<span class="literal">false</span>             <span class="comment">// !f 结果为 true</span></span><br><span class="line">n3=!<span class="string">"Cat"</span>             <span class="comment">// !t 结果为 false</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      在用javaScript的if的时候他会把固定的值转换为false，其他的统一认为为true
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>javascript-GC</title>
    <link href="http://asyncnode.com//blog/javascript-GC.html"/>
    <id>http://asyncnode.com//blog/javascript-GC.html</id>
    <published>2017-10-31T13:20:13.000Z</published>
    <updated>2018-11-13T08:48:55.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><font color="red"></font></p><p><font color="red">JavaScript创建变量（对象，字符串等）时分配内存，并且在不再使用它们时“自动”释放。</font> 后一个过程称为垃圾回收。这个“自动”是混乱的根源，并让JavaScript（和其他高级语言）开发者感觉他们可以不关心内存管理。<font color="red">而不是别人所说的:编写JavaScript程序时，所需内存的分配以及无用内存的回收完全实现自动管理</font>但是他会按照固定的时间间隔（或代码执行中预定的收集时间）周期性地执行这一操作</p><h2 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a>内存生命周期</h2><p>其实别的语言的内存声明周期基本是那个是一致的：<br>1、 分配你所需要的内存<br>2、使用分配到内存（读、写）<br>3、不需要时将其释放\归还</p><h3 id="JavaScript-的内存分配"><a href="#JavaScript-的内存分配" class="headerlink" title="JavaScript 的内存分配"></a>JavaScript 的内存分配</h3><p>1、JavaScript 在定义变量时就完成了内存分配<br>2、通过函数调用分配内存</p><h3 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h3><p>当内存不再需要使用时释放，高级语言解释器嵌入了“垃圾回收器”，它的主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。</p><h2 id="两种垃圾回收方式"><a href="#两种垃圾回收方式" class="headerlink" title="两种垃圾回收方式"></a>两种垃圾回收方式</h2><p>浏览器的内存处理基本分为两种，<font color="red">引用技术垃圾收集</font>、<font color="red">标记清除</font>两种，下面一一介绍。</p><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。</p><p><font color="red">但是他有比较大的限制，就是当对象循环引用，引用计数不会回收它</font></p><h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>垃圾收集器会按照固定的时间间隔周期性的执行这一操作。<br>从2012年起，所有现代浏览器都使用了标记-清除垃圾回收算法。所有对JavaScript垃圾回收算法的改进都是基于标记-清除算法的改进，并没有改进标记-清除算法本身和它对“对象是否不再需要”的简化定义。<br>简单来讲就是，当变量进入环境时，就是将变量标记为“进入环境”。当变量离开环境时，则将其标记为“离开环境”。<br>收集器在运行时会给存储在内存中的所有变量都加上标记，然后它会去掉环境中的变量以及被环境中的变量引用的变量的标记。剩下的在被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量。最后，垃圾收集器完成内存清除，销毁那些带有标记的值并收回它们所占用的内存空间。<br>这中算法是没有循环引用限制的</p>]]></content>
    
    <summary type="html">
    
      JavaScript创建变量（对象，字符串等）时分配内存，并且在不再使用它们时“自动”释放，不是人们所说的完全的垃圾回收机制。
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>webpack-build-iconfont</title>
    <link href="http://asyncnode.com//blog/webpack-build-iconfont.html"/>
    <id>http://asyncnode.com//blog/webpack-build-iconfont.html</id>
    <published>2017-10-26T06:49:40.000Z</published>
    <updated>2018-11-13T08:48:55.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在使用webpack打包自己在icomoon中的制作的iconfont,即使放到最外层的static文件家中，打包后它的路径也是不对的，这个在vue的github的issue中有人是这么解决的<br>在build文件夹中的utils.js中用vue-style-loader来编译css,修改如下<br>原<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">    <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">        use: loaders,</span><br><span class="line">        fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>].concat(loaders)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加路径后<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">    <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">        use: loaders,</span><br><span class="line">        fallback: <span class="string">'vue-style-loader'</span>,</span><br><span class="line">        <span class="comment">// 添加路径</span></span><br><span class="line">        publicPath: <span class="string">'../../'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>].concat(loaders)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样编译完成以后的iconfont路径是正确的</p>]]></content>
    
    <summary type="html">
    
      用vue-cli打包iconfont
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
      <category term="WebPack" scheme="http://asyncnode.com/categories/JavaScript/WebPack/"/>
    
      <category term="vue-cli" scheme="http://asyncnode.com/categories/JavaScript/WebPack/vue-cli/"/>
    
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
      <category term="WebPack" scheme="http://asyncnode.com/tags/WebPack/"/>
    
      <category term="vue-cli" scheme="http://asyncnode.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>webpack_Environment_build</title>
    <link href="http://asyncnode.com//blog/webpack-Environment-build.html"/>
    <id>http://asyncnode.com//blog/webpack-Environment-build.html</id>
    <published>2017-10-25T06:20:59.000Z</published>
    <updated>2018-11-13T08:48:55.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在公司整体的框架就是要分为测试环境、预发布环境、正式环境，要切换不同的后台api地址，登录地址也是跳转别的子站点登录，所以就要通过编译不同环境的前端代码。<br>用的vue默认的脚手架<font color="red">vue-cli</font><br>第一种就是通过<font color="red">process.env</font>来传递不同的值，在<font color="red">config</font>文件夹中通过 <font color="red">dev.env.js、pro.env.js</font>区分是什么环境要调用的接口地址和登录地址</p><h2 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h2><p>可以通过最外层的<font color="red">package.json</font>中的<font color="red">scripts</font>对象中的<font color="red">dev添加 <font color="red">set API_ROOT=localhost&amp;&amp; node build/dev-server.js</font>并且在<font color="red">config文件夹中的dev.env.js</font>加一个判断,分别判断 sit、uat、pro正式环境还有本地loaclhost，打包不同的文件和接口<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">switch</span> (process.env.API_ROOT) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'sit'</span>:</span><br><span class="line">        <span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">            NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">            API_URL: <span class="string">''</span>,</span><br><span class="line">            LOGIN_URL: <span class="string">''</span>,</span><br><span class="line">            LOGOUT_URL: <span class="string">''</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'uat'</span>:</span><br><span class="line">        <span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">            NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">            API_URL: <span class="string">''</span>,</span><br><span class="line">            LOGIN_URL: <span class="string">''</span>,</span><br><span class="line">            LOGOUT_URL: <span class="string">''</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'pro'</span>:</span><br><span class="line">        <span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">            NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">            API_URL: <span class="string">''</span>,</span><br><span class="line">            LOGIN_URL: <span class="string">''</span>,</span><br><span class="line">            LOGOUT_URL: <span class="string">''</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">            NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">            API_URL: <span class="string">''</span>,</span><br><span class="line">            LOGIN_URL: <span class="string">''</span>,</span><br><span class="line">            LOGOUT_URL: <span class="string">''</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><p>但是有一个不好的地方，就是要写多个dev-sit、dev-uat、dev-pro和build-sit、build-uat、build-pro要运行不同的环境和打包不同的环境<br>同时在<font color="red">api.js</font>中读取<font color="red">process.env.API_URL</font>来调用不同的接口位置</p><h2 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h2><p>可以在 cmd 运行npm run dev时添加进程的信息，如在window端添加进程信息set API_ROOT=localhost&amp;&amp; npm run dev这样式和上面有同样的结果，这样更简洁一些，这只是个人的一些简单的见解。</p>]]></content>
    
    <summary type="html">
    
      在用webpack打包的时候，要区分正式环境、测试环境、预发布环境，要调用不同的接口和一些路径不同，我用vue官方脚手架vue-cli上做的
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
      <category term="WebPack" scheme="http://asyncnode.com/categories/JavaScript/WebPack/"/>
    
      <category term="vue-cli" scheme="http://asyncnode.com/categories/JavaScript/WebPack/vue-cli/"/>
    
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
      <category term="WebPack" scheme="http://asyncnode.com/tags/WebPack/"/>
    
      <category term="vue-cli" scheme="http://asyncnode.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>Object的一些基本属性和方法</title>
    <link href="http://asyncnode.com//blog/object-Object-1.html"/>
    <id>http://asyncnode.com//blog/object-Object-1.html</id>
    <published>2017-09-15T03:30:30.000Z</published>
    <updated>2018-11-13T08:48:55.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>JavaScript中几乎所有的对象都是 Object 的实例; 所有的对象都继承了Object.prototype的属性和方法.对象的原型的改变会传播到所有对象上，除非这些属性和方法被其他对象原型链更里层的改动所覆盖。</p><ul><li>Object.prototype</li></ul>]]></content>
    
    <summary type="html">
    
      Object基本上是JavaScript中最重要的一个了
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/categories/JavaScript/ECMAScript6/"/>
    
      <category term="Object" scheme="http://asyncnode.com/categories/JavaScript/ECMAScript6/Object/"/>
    
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/tags/ECMAScript6/"/>
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
      <category term="Object" scheme="http://asyncnode.com/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>mockData</title>
    <link href="http://asyncnode.com//blog/mockData.html"/>
    <id>http://asyncnode.com//blog/mockData.html</id>
    <published>2017-09-13T05:30:46.000Z</published>
    <updated>2018-11-13T08:48:55.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p> 在项目开发中，有很多时候是在后台接口还没开发好，有的是api接口都没写，有的是有api接口但是没有数据，不管是那种，都是在大家都对数据格式，接口的方式都是有统一了的，才能做mock数据，不然的话数据格式变化，接口内容变化，基本上前端mock不mocK数据基本上没什么用，还是等于对接两遍。</p><ul><li>我自己的建议，当有接口api的时候，但是没有真实数据的时候，我推荐用<font color="red">mock.js</font>来解决问题，不需要自己再用express，或者别的框架自己发布本地接口，直接在ajax返回数据的时候改变response的data数据</li><li>另一种就是完全都没有后台接口的时候，要自己本地跑起来接口或者别的地方要有接口api才可以mock数据，建议使用<font color="red">easy-mock</font></li></ul><h3 id="mock-js"><a href="#mock-js" class="headerlink" title="mock.js"></a>mock.js</h3><ul><li>首先：<br>可以在自己项目中的package.json中添加mock.js和版本号<font color="red">“mockjs”: “^1.0.1-beta3”</font>可以通过在github中看他的tag号，使用他最稳定的版本，通过<font color="red">npm install</font>or<font color="red">cnpm install</font>or<font color="red">yarn</font>都是可以的，这个完全看自己的网络了。</li><li>然后：<br>在自己的<font color="red">api</font>同级创建一个<font color="red">mock文件夹</font>在里面再创建一个叫做，mock.js的文件。我只是简单的做一个demo,具体的mock怎么构思和构建要看自己的业务，可以见一个总开关来控制是否mock数据，和子开关来控制是否mock子接口，如<font color="red">process.env.NODE_ENV</font> 或者别的全局来判断是否开启mock数据 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"><span class="keyword">let</span> Random = Mock.Random; <span class="comment">// 这个只是 其中的一种形式 还有其他两种</span></span><br><span class="line"><span class="keyword">const</span> oMsgData = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|10'</span>: [&#123;</span><br><span class="line">    name: <span class="string">'@cname'</span>,</span><br><span class="line">    id: <span class="string">'@increment'</span>,</span><br><span class="line">    content: <span class="string">'@csentence'</span>,</span><br><span class="line">    createTime: <span class="string">'@date'</span>,</span><br><span class="line">    isRead: <span class="built_in">Number</span>(Random.boolean()),</span><br><span class="line">    isTop: <span class="built_in">Number</span>(Random.boolean()),</span><br><span class="line">    state: <span class="built_in">Number</span>(Random.boolean()),</span><br><span class="line">    type: <span class="string">'@increment'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// console.log(JSON.stringify(oMsgData, null, 4));</span></span><br><span class="line"><span class="comment">// console.log(oMsgData);</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; rurl 要替换的接口路径名</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; rtype 要替换的接口请求方式</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; data 要替换的接口的response的data</span></span><br><span class="line"><span class="comment">/</span></span><br><span class="line"><span class="comment">// 他会自动帮你填写 域名和端口号 rurl rtype response.data</span></span><br><span class="line"><span class="comment">Mock.mock('/api/notice/noticeListAdmin', 'post', &#123;oMsgData&#125;);</span></span><br></pre></td></tr></table></figure></li></ul><p>具体的参数我这个就不讲了，首先引入<font color="red">Mock.js</font>,然后可以通过<font color="red"> ‘@cname’</font>生成随机的名字，也可以通过<font color="red"> Mock.Random.cname()</font>生成随机名字。<br>[参考] <a href="http://mockjs.com/" target="_blank" rel="noopener">http://mockjs.com/</a> 这个是mock.js的官方文档，里面有mock的具体用法.</p><h3 id="easy-mock"><a href="#easy-mock" class="headerlink" title="easy-mock"></a>easy-mock</h3><p>这种是在线方式的，完全可以在他这个里面创建一套符合自己的api接口，具体当可以看下面的连接，这个我感觉没什么好讲的了，因为感觉自己归纳的也没有人家文档好，反正是挺好的。<br>[easy-mock] <a href="https://easy-mock.com/docs" target="_blank" rel="noopener">https://easy-mock.com/docs</a></p>]]></content>
    
    <summary type="html">
    
      主要讲的是在后台接口还没有搭建完成，或者说根本还没有api的时候，或者说有api但是没数据的时候，前端怎么模拟数据，我这里只给一个小的demo，真正要构建一套还是要根据业务来
    
    </summary>
    
      <category term="vue" scheme="http://asyncnode.com/categories/vue/"/>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/vue/JavaScript/"/>
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/categories/vue/JavaScript/ECMAScript6/"/>
    
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/tags/ECMAScript6/"/>
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
      <category term="vue" scheme="http://asyncnode.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中float精度问题</title>
    <link href="http://asyncnode.com//blog/float-Operation.html"/>
    <id>http://asyncnode.com//blog/float-Operation.html</id>
    <published>2017-09-07T08:07:20.000Z</published>
    <updated>2018-11-13T08:48:55.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在用到JavaScript中float类型的值来运算时,会产生精度不准的问题。<br>例如：<br><img src="../images/float/float.jpg" alt="float operation"><br>可以看到：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span>+<span class="number">0.2</span>);</span><br><span class="line"><span class="comment">// 0.30000000000000004</span></span><br></pre></td></tr></table></figure></p><p>他得到的值是不精准的，简单来说，你的电脑做着正确的二进制浮点运算，但问题是你输入的是十进制的数，电脑以二进制运算，这两者并不是总是转化那么好的<br>想了解更详细的请参考&gt; <a href="https://www.zhihu.com/question/20679634" target="_blank" rel="noopener">https://www.zhihu.com/question/20679634</a></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在用到JavaScript中float类型的值来运算时,会产生精度不准的问题。&lt;br&gt;例如：&lt;br&gt;&lt;img src=&quot;../images/
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>cookie_function</title>
    <link href="http://asyncnode.com//blog/cookie-function.html"/>
    <id>http://asyncnode.com//blog/cookie-function.html</id>
    <published>2017-08-31T03:33:31.000Z</published>
    <updated>2018-11-13T08:48:55.288Z</updated>
    
    <content type="html"><![CDATA[<p><font color="red"></font></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="Cookie在客户端JavaScript中"><a href="#Cookie在客户端JavaScript中" class="headerlink" title="Cookie在客户端JavaScript中"></a>Cookie在客户端JavaScript中</h3><p>用JavaScript操作<font color="red">Cookie</font>，用原声的接口<font color="red">document.cookie</font>属性是比较难用的，所以封装一个添加、修改、删除的操作方法还是很有必要的。<br>同时要注意的是： Cookie的所有<font color="red">name</font>和<font color="red">value</font>都是要经过<font color="red">URI</font>编码的，必须使用<font color="red">decodeURICompoent()</font>来编码。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;Cookie在客户端JavaScript中&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
      <category term="常用技巧" scheme="http://asyncnode.com/categories/JavaScript/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
      <category term="Cookie" scheme="http://asyncnode.com/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>Vue官方的vue-cli一些优化打包方式的配置和方法，懒加载和dll优化方式</title>
    <link href="http://asyncnode.com//blog/vue-build-dll.html"/>
    <id>http://asyncnode.com//blog/vue-build-dll.html</id>
    <published>2017-08-17T08:56:33.000Z</published>
    <updated>2018-11-13T08:48:55.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>我用了官方脚手架vue-cli，有两个页面<font color="red">ppt_model.vue</font>和 <font color="red">ppt_model1.vue</font>,在两个页面中分别引入了echarts、jquery<br>他<font color="red">默认</font>会把所有的报都打包到 <font color="red">app.js</font>和<font color="red">vendor.js</font>中。<br>运行<font color="red">npm run build –report</font><br>如下图所示：<br>在cmd中显示打包信息<br><img src="../images/vue_build/vue_build_dos1.jpg" alt="cmd build"><br>在页面中显示打包信息<br><img src="../images/vue_build/vue_build_dos2.jpg" alt="html build"></p><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>使用vue-router官方推荐的懒加载,基本语法是  <font color="red">component: resolve =&gt; require([‘../view/ppt_model.vue’], resolve)</font><br>会把每一个页面分开打包成一个js文件，当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。<br>参考 &gt; <a href="https://router.vuejs.org/zh-cn/advanced/lazy-loading.html" target="_blank" rel="noopener">https://router.vuejs.org/zh-cn/advanced/lazy-loading.html</a><br>打包如下所示：<br>在cmd中显示打包信息<br><img src="../images/vue_build/vue_build_dos3.jpg" alt="cmd build"><br>在页面中显示打包信息<br><img src="../images/vue_build/vue_build_dos4.jpg" alt="html build"><br>其中的<font color="red">static/js/0.66e1ff74acbd166fa927.js</font>对应的是<font color="red">ppt_model.vue</font>页面</p><p><font color="red">static/js/1.f09ddc0b737b2466f148.js</font>对应的是<font color="red">ppt_model1.vue</font>页面</p><h2 id="webpack官方提供的DllReferencePlugin"><a href="#webpack官方提供的DllReferencePlugin" class="headerlink" title="webpack官方提供的DllReferencePlugin"></a>webpack官方提供的DllReferencePlugin</h2><p>这个插件是在 webpack 主配置文件中设置的， 这个插件把只有 dll 的 bundle(们)(dll-only-bundle(s)) 引用到需要的预编译的依赖。<br>简单的说，就是把静态的插件库打包到一个静态文件里，同时生成对静态文件引用的json文件，通过webpack的DllReferencePlugin插件实现，打包的优化.<br>首先创建一个名为<font color="red">webpack.dll.config.js</font>文件，内容为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        vendor: [<span class="string">'vue-router'</span>, <span class="string">'echarts'</span>, <span class="string">'jquery'</span>, <span class="string">'vue'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'../static/js'</span>),</span><br><span class="line">        filename: <span class="string">'dll.[name].js'</span>,</span><br><span class="line">        library: <span class="string">'[name]'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">            path: path.join(__dirname, <span class="string">'dll'</span>, <span class="string">'[name]-manifest.json'</span>),</span><br><span class="line">            name: <span class="string">'[name]'</span>,</span><br><span class="line">            context: path.resolve(__dirname, <span class="string">'client'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">            warnings: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在你的项目文件夹目录cmd中运行<font color="red">webpack –config ./build/webpack.dll.config.js</font>在<font color="red">build</font>中新建了一个<font color="red">dll</font>中有一个<font color="red">vendor-manifest.json</font>和，在<font color="red">static(最外层的static)</font>中新建一个<font color="red">dll.vendor.js</font>。<br>在<font color="red">build</font>文件中<font color="red">webpack.prod.conf.js</font>添加一段代码<br>在打包前记得在index.html最下方，因为打包生成的js,<font color="red"><script src="./static/js/dll.vendor.js"></script></font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记得在plugins中添加</span></span><br><span class="line"><span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    context: path.join(__dirname, <span class="string">"client"</span>),</span><br><span class="line">    manifest: <span class="built_in">require</span>(<span class="string">"./dll/vendor-manifest.json"</span>)</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p><p>再运行<font color="red">npm run build –report</font><br>运行结果如图所示：<br>在cmd中显示打包信息<br><img src="../images/vue_build/vue_build_dos6.jpg" alt="cmd build"><br>在页面中显示打包信息<br><img src="../images/vue_build/vue_build_dos7.jpg" alt="html build"></p><p><font color="red"><strong>注意</strong></font><br>在打包前记得在index.html最下方，引入打包生成的js<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dq2.0<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./static/js/dll.vendor.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果报错，请参考 &gt; <a href="https://router.vuejs.org/zh-cn/advanced/lazy-loading.html" target="_blank" rel="noopener">https://router.vuejs.org/zh-cn/advanced/lazy-loading.html</a><br>本地可以预览页面效果，接口是不能调用的，dist中的index.html</p>]]></content>
    
    <summary type="html">
    
      在使用了Vue官方的vue-cli时，使用dll优化打包过程，也可以用懒加载来优化
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/categories/JavaScript/ECMAScript6/"/>
    
      <category term="Vue" scheme="http://asyncnode.com/categories/JavaScript/ECMAScript6/Vue/"/>
    
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/tags/ECMAScript6/"/>
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://asyncnode.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>heatmap.js绘制热力图和擦除热力图</title>
    <link href="http://asyncnode.com//blog/hetamap-draw.html"/>
    <id>http://asyncnode.com//blog/hetamap-draw.html</id>
    <published>2017-08-17T06:24:24.000Z</published>
    <updated>2018-11-13T08:48:55.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>绘制了热力图的时候用到了插件heatmap.js,高德地图的热力图也是用了这个插件来绘制的。<br>heatmap &gt; <a href="https://www.patrick-wied.at/static/heatmapjs/" target="_blank" rel="noopener">https://www.patrick-wied.at/static/heatmapjs/</a><br>可能比较冷门，一般的话相信没人会用这个工具的，但是现在大数据这么火，相信还是有人能用到的。<br>要做的是，上传一张图片，然后在图片上绘制热力图，同是也是可以擦除，这个只是一个小的demo,可以根据自己的实际场景来实际应用</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>默认是绘制图形，点击清除，擦除热力图</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.heatmap</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">width</span><span class="selector-pseudo">:1800px</span>; <span class="selector-tag">height</span><span class="selector-pseudo">:600px</span>;<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;<span class="selector-tag">border-color</span>: <span class="selector-tag">grey</span>;<span class="selector-tag">cursor</span>: <span class="selector-tag">pointer</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.imgUpdate</span> &#123;</span></span><br><span class="line"><span class="undefined">                position: absolute;</span></span><br><span class="line"><span class="undefined">                left: 10px;</span></span><br><span class="line"><span class="undefined">                top: 60px;</span></span><br><span class="line"><span class="undefined">                z-index: -999;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.draw</span>, <span class="selector-class">.clear</span>&#123;</span></span><br><span class="line"><span class="undefined">                display: inline-block;</span></span><br><span class="line"><span class="undefined">                width: 50px;</span></span><br><span class="line"><span class="undefined">                height: 50px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.circle</span> &#123;</span></span><br><span class="line"><span class="undefined">                width: 15px;</span></span><br><span class="line"><span class="undefined">                height: 15px;</span></span><br><span class="line"><span class="undefined">                position: absolute;</span></span><br><span class="line"><span class="undefined">                border: 2px solid red;</span></span><br><span class="line"><span class="undefined">                border-radius: 100%;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"activat"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"draw"</span>&gt;</span>画图<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span>清除<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"heatmap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ge_pic_icon_Infor"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"imgUpdate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Infor_file"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadPicture"</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">title</span>=<span class="string">"上传照片"</span> <span class="attr">onchange</span>=<span class="string">"getPhoto(this)"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/heatmap.js/2.0.2/heatmap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> hm = <span class="built_in">document</span>.querySelector(<span class="string">'.heatmap'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> clearDom = <span class="built_in">document</span>.querySelector(<span class="string">'.clear'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> drawDom = <span class="built_in">document</span>.querySelector(<span class="string">'.draw'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> circleDom = <span class="built_in">document</span>.querySelector(<span class="string">'.circle'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> State = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// var hehedom = document.querySelector('#hehe');</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// hehedom.addEventListener('change', function () &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     console.log(this.value)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> heatmap = h337.create(&#123;</span></span><br><span class="line"><span class="undefined">        container: hm,</span></span><br><span class="line"><span class="undefined">        radius: 30</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    heatmap.setData (&#123;</span></span><br><span class="line"><span class="undefined">    max: 100,</span></span><br><span class="line"><span class="undefined">    min: 0,</span></span><br><span class="line"><span class="undefined">    data: []</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lastX, lastY;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> key = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    body.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        key = 1;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    body.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        key = 0;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arr = [];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arr1 = [];</span></span><br><span class="line"><span class="javascript">    hm.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(222);</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (key !== <span class="number">1</span>) &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(ev);</span></span></span><br><span class="line"><span class="undefined">        lastX = ev.pageX;</span></span><br><span class="line"><span class="undefined">        lastY = ev.pageY - 50;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="undefined">            x: lastX,</span></span><br><span class="line"><span class="undefined">            y: lastY,</span></span><br><span class="line"><span class="undefined">            value: 10</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        heatmap.addData(obj);</span></span><br><span class="line"><span class="undefined">        arr.push(obj);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(obj);</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    drawDom.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        hm.onmousemove = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        hm.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (key !== <span class="number">1</span>) &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(ev);</span></span></span><br><span class="line"><span class="undefined">            lastX = ev.pageX;</span></span><br><span class="line"><span class="undefined">            lastY = ev.pageY - 50;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="undefined">                x: lastX,</span></span><br><span class="line"><span class="undefined">                y: lastY,</span></span><br><span class="line"><span class="undefined">                value: 10</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            heatmap.addData(obj);</span></span><br><span class="line"><span class="undefined">            arr.push(obj);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    clearDom.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        hm.onmousemove = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        hm.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            circleDom.style.left = ev.pageX + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="javascript">            circleDom.style.top = ev.pageY + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (key !== <span class="number">1</span>) &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(ev);</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> arr2 = [];</span></span><br><span class="line"><span class="javascript">            arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// console.log(typeof ev.pageX);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// console.log(ev.pageX + '' + ev.pageY);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// for (let i = 0; i &lt;= 15; i++) &#123;</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> dx = ev.pageX - item.x;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> dy = ev.pageY - item.y - <span class="number">50</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log((dx * dx) + (dy * dy));</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> ((dx * dx) + (dy * dy) &lt;= <span class="number">15</span> * <span class="number">15</span>)&#123;</span></span><br><span class="line"><span class="undefined">                        arr2.push(index);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (arr2.length) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(arr2)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> arr3 = [];</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(arr);</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (arr.length === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="undefined">                    arr = [];</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">                    arr.splice((arr2[i]-i), 1)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> oObj = &#123;</span></span><br><span class="line"><span class="undefined">                max: 100,</span></span><br><span class="line"><span class="undefined">                min: 0,</span></span><br><span class="line"><span class="undefined">                data: arr</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.heatmap.setData(oObj);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> imgurl = <span class="string">""</span>;  </span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">getPhoto</span>(<span class="params">node</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> imgURL = <span class="string">""</span>;  </span></span><br><span class="line"><span class="javascript">            <span class="keyword">try</span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> file = <span class="literal">null</span>;  </span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(node.files &amp;&amp; node.files[<span class="number">0</span>] )&#123;  </span></span><br><span class="line"><span class="undefined">                    file = node.files[0];  </span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(node.files &amp;&amp; node.files.item(<span class="number">0</span>)) &#123;  </span></span><br><span class="line"><span class="undefined">                    file = node.files.item(0);  </span></span><br><span class="line"><span class="undefined">                &#125;  </span></span><br><span class="line"><span class="javascript">                <span class="comment">//Firefox 因安全性问题已无法直接通过input[file].value 获取完整的文件路径  </span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">try</span>&#123;  </span></span><br><span class="line"><span class="undefined">                    imgURL =  file.getAsDataURL();  </span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">catch</span>(e)&#123;  </span></span><br><span class="line"><span class="javascript">                    imgRUL = <span class="built_in">window</span>.URL.createObjectURL(file);  </span></span><br><span class="line"><span class="undefined">                &#125;  </span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">catch</span>(e)&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (node.files &amp;&amp; node.files[<span class="number">0</span>]) &#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();  </span></span><br><span class="line"><span class="javascript">                    reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;  </span></span><br><span class="line"><span class="undefined">                        imgURL = e.target.result;  </span></span><br><span class="line"><span class="undefined">                    &#125;;  </span></span><br><span class="line"><span class="undefined">                    reader.readAsDataURL(node.files[0]);  </span></span><br><span class="line"><span class="undefined">                &#125;  </span></span><br><span class="line"><span class="undefined">            &#125;  </span></span><br><span class="line"><span class="undefined">            creatImg(imgRUL);  </span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> imgURL;  </span></span><br><span class="line"><span class="undefined">        &#125;  </span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">creatImg</span>(<span class="params">imgRUL</span>)</span>&#123;  </span></span><br><span class="line"><span class="xml">            // var textHtml = "<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'"+imgRUL+"'</span><span class="attr">width</span>=<span class="string">'414px'</span> <span class="attr">height</span>=<span class="string">'600px'</span>/&gt;</span>";</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.querySelector(<span class="string">".imgUpdate"</span>).setAttribute(<span class="string">'src'</span>, imgRUL);  </span></span><br><span class="line"><span class="undefined">        &#125;  </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如图所示：<br>  <img src="../images/heatmap/heatmap1.jpg" alt="hearmap draw"></p>]]></content>
    
    <summary type="html">
    
      因为一些特殊的业务需求，所以就有这个绘制热力图的heatmap的使用
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
      <category term="heatmap" scheme="http://asyncnode.com/tags/heatmap/"/>
    
  </entry>
  
  <entry>
    <title>实现经典的三列布局</title>
    <link href="http://asyncnode.com//blog/Classic-layout.html"/>
    <id>http://asyncnode.com//blog/Classic-layout.html</id>
    <published>2017-08-16T05:45:57.000Z</published>
    <updated>2018-11-13T08:48:55.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><font color="red"></font><br>圣杯布局和双飞翼布局解决的问题是一样的，就是两边<font color="red">定宽</font>，中间<font color="red">自适应</font>的三栏布局，<font color="red">中间栏</font>要在放在文档流前面以<font color="red">优先渲染</font>。</p><h3 id="区别和统一"><a href="#区别和统一" class="headerlink" title="区别和统一"></a>区别和统一</h3><p>圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是<font color="red">三栏</font>全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。</p><p>不同在于解决”中间栏div内容不被遮挡“问题的思路不一样：<br>圣杯布局，为了中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。</p><p>双飞翼布局，为了中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。</p><p>简单说起来就是”双飞翼布局比圣杯布局多创建了一个div，但不用相对布局了“，而不是你题目中说的”去掉relative”就是双飞翼布局“。</p><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>圣杯布局，为了中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"con_continer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"con_left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"con_right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先设置<font color="red">container</font>的左右<font color="red">padding</font>值来摆正<font color="red">con_continer的位置</font><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*圣杯布局*/</span></span><br><span class="line"><span class="comment">/*摆正中间栏的位置*/</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">200px</span>;&#125;</span><br><span class="line"><span class="comment">/*清除浮动*/</span></span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span>&#123;<span class="attribute">content</span>:<span class="string">""</span>; <span class="attribute">display</span>: block; <span class="attribute">clear</span>:both; <span class="attribute">overflow</span>: hidden; <span class="attribute">zoom</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">/*设置三栏高度*/</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_continer</span>, <span class="selector-class">.container</span> <span class="selector-class">.con_left</span>, <span class="selector-class">.container</span> <span class="selector-class">.con_right</span> &#123;<span class="attribute">height</span>: <span class="number">400px</span>;&#125;</span><br><span class="line"><span class="comment">/*设置三栏为左浮动 float:left*/</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_continer</span> &#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">background</span>:red&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_left</span> &#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">background</span>:yellow;&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_right</span> &#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">background</span>:yellow;&#125;</span><br></pre></td></tr></table></figure></p><p>如下图所示：<br><img src="../images/css/shengbei1.jpg" alt="css 圣杯布局"><br>左右栏通过添加<font color="red">负的margin</font>放到正确的位置了<br>修改如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_continer</span> &#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">background</span>:red&#125;</span><br><span class="line">// 通过margin-left为-100% 左侧栏 覆盖到中间栏上，再通过相对定位的负的left值来让他在左边</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_left</span> &#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">margin-left</span>:-<span class="number">100%</span>;<span class="attribute">background</span>:yellow;<span class="attribute">position</span>:relative;<span class="attribute">left</span>:-<span class="number">200px</span>&#125;</span><br><span class="line">// 通过margin-left为-200px 右侧栏 覆盖到中间栏上，再通过相对定位的负的right值来让他在右边</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_right</span> &#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">margin-left</span>:-<span class="number">200px</span>;<span class="attribute">background</span>:yellow;<span class="attribute">position</span>:relative;<span class="attribute">right</span>:-<span class="number">200px</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>双飞翼布局，为了中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"con_continer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"con_left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"con_right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*双飞翼布局*/</span></span><br><span class="line"><span class="comment">/*清除浮动*/</span></span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span>&#123;<span class="attribute">content</span>:<span class="string">""</span>; <span class="attribute">display</span>: block; <span class="attribute">clear</span>:both; <span class="attribute">overflow</span>: hidden; <span class="attribute">zoom</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">/*设置三栏高度*/</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_continer</span>, <span class="selector-class">.container</span> <span class="selector-class">.con_left</span>, <span class="selector-class">.container</span> <span class="selector-class">.con_right</span>, <span class="selector-class">.container</span> <span class="selector-class">.con_continer</span> <span class="selector-class">.item</span> &#123;<span class="attribute">height</span>: <span class="number">400px</span>;&#125;</span><br><span class="line"><span class="comment">/*设置三栏为左浮动 float:left*/</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_continer</span> &#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">background</span>:red&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_left</span> &#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">background</span>:yellow;&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_right</span> &#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">background</span>:yellow;&#125;</span><br></pre></td></tr></table></figure><p>如下图所示：<br><img src="../images/css/shengbei2.jpg" alt="css 圣杯布局"><br>左右栏通过添加<font color="red">负的margin</font>放到正确的位置了<br>修改如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_continer</span> &#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">background</span>:red&#125;</span><br><span class="line">// 通过margin-left为-100% 左侧栏 覆盖到中间栏上，再通过相对定位的负的left值来让他在左边</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_left</span> &#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">margin-left</span>:-<span class="number">100%</span>;<span class="attribute">background</span>:yellow;&#125;</span><br><span class="line">// 通过margin-left为-200px 右侧栏 覆盖到中间栏上，再通过相对定位的负的right值来让他在右边</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_right</span> &#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">margin-left</span>:-<span class="number">200px</span>;<span class="attribute">background</span>:yellow;&#125;</span><br><span class="line">// 设置 con_continer内部 内容的margin来防止覆盖</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.con_continer</span> <span class="selector-class">.item</span> &#123;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">200px</span> <span class="number">0</span> <span class="number">180px</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>修改后的结局为这样<br><img src="../images/css/shengbei3.jpg" alt="css 圣杯布局"></p>]]></content>
    
    <summary type="html">
    
      三列布局（中间一列自适应 左右两列固定宽度），圣杯和双飞翼布局
    
    </summary>
    
      <category term="html" scheme="http://asyncnode.com/categories/html/"/>
    
      <category term="css" scheme="http://asyncnode.com/categories/html/css/"/>
    
    
      <category term="html" scheme="http://asyncnode.com/tags/html/"/>
    
      <category term="css" scheme="http://asyncnode.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>ES6中Number一些新增的方法和属性</title>
    <link href="http://asyncnode.com//blog/es6-Number.html"/>
    <id>http://asyncnode.com//blog/es6-Number.html</id>
    <published>2017-08-08T06:45:32.000Z</published>
    <updated>2018-11-13T08:48:55.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>JavaScript 的 Number 对象是经过封装的能让你处理数字值的对象。Number 对象由 Number() 构造器创建。</p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>Number 对象主要用于：</p><ul><li><font color="red">如果参数无法被转为数字，则返回NaN.</font></li><li><font color="red">早非构造器上下文中（如：没有new操作符），Number能被用来执行类型转换</font></li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="Number-EPSTION"><a href="#Number-EPSTION" class="headerlink" title="Number.EPSTION"></a><font color="red">Number.EPSTION</font></h3><p>两个可表示(representable)数之间的最小间隔。</p><font color="red">EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16，或者 2-52。</font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0.2</span>;</span><br><span class="line">y = <span class="number">0.3</span>;</span><br><span class="line">z = <span class="number">0.1</span>;</span><br><span class="line">equal = (<span class="built_in">Math</span>.abs(x - y + z) &lt; <span class="built_in">Number</span>.EPSILON);</span><br></pre></td></tr></table></figure><br><br>### <font color="red">Number.MAX_SAFE_INTEGER Number.MIN_SAFE_INTEGER</font><br>Number.MAX_SAFE_INTEGER 常量表示在 JavaScript 中最大的安全整数（maxinum safe integer)（253 - 1）。<br>Number.MIN_SAFE_INTEGER 代表在 JavaScript中最小的安全的integer型数字 (-(253 - 1)).<br><font color="red">MAX_SAFE_INTEGER 常量值为 9007199254740991。</font><br><font color="red">MIN_SAFE_INTEGER 的值是-9007199254740991.</font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER <span class="comment">// 9007199254740991</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>     <span class="comment">// 9007199254740991</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER <span class="comment">// -9007199254740991</span></span><br><span class="line">-(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>)  <span class="comment">// -9007199254740991</span></span><br></pre></td></tr></table></figure><br><br>### <font color="red">Number.MAX_VALUE Number.MIN_VALUE</font><br>Number.MAX_VALUE 属性表示在 JavaScript 里所能表示的最大数值<br>Number.MIN_VALUE 属性表示在 JavaScript 中所能表示的最小的正值<br><font color="red">MAX_VALUE 属性值接近于 1.79E+308。大于 MAX_VALUE 的值代表 “Infinity”。</font><br><font color="red">MIN_VALUE 的值约为 5e-324。小于 MIN_VALUE (“underflow values”) 的值将会转换为 0。</font><br>因为 MAX_VALUE 是 Number 对象的一个静态属性，所有应该直接使用，Number.MAX_VALUE ，而不是作为一个创建的 Number 实例的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (num1 * num2 &lt;= <span class="built_in">Number</span>.MAX_VALUE) &#123;</span><br><span class="line">    func1();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    func2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num1 / num2 &gt;= <span class="built_in">Number</span>.MIN_VALUE) &#123;</span><br><span class="line">    func1();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    func2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### <font color="red">Number.NaN Number.prototype</font><br>Number.NaN 表示“非数字”（Not-A-Number）。和 NaN 相同。<br>Number.prototype 属性表示 Number 构造函数的原型。<br><font color="red">所有 Number 实例都继承自 Number.prototype。修改 Number 构造函数的原型对象会影响到所有 Number 实例。.</font><br><font color="red">不必创建一个 Number 实例来访问该属性，使用 Number.NaN 来访问该静态属性。</font><br>#### 属性<br><font color="red">constructor</font><br>返回创建该实例对象的构造函数。默认为 Number 对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Properties inherited <span class="keyword">from</span> <span class="built_in">Object</span>:</span><br><span class="line">__parent__, __proto__</span><br></pre></td></tr></table></figure><br><br>## 方法<br>实例本身的方法 Number.isFinite()、Number.isInteger()、Number.isNaN()、Number.isSafeInteger()、Number.parseFloat()、Number.parseInt()<br>prototype原型上的方法 Number.prototype.toExponential()、Number.prototype.toFixed()、Number.prototype.toLocaleString()、Number.prototype.toPrecision()、Number.prototype.toSource()、Number.prototype.toString()、Number.prototype.valueOf()<br>### Number.isFinite() Number.isSafeInteger()<br>Number.isFinite() 方法用来检测传入的参数是否是一个有穷数（finite number）。<br>Number.isSafeInteger() 方法用来判断传入的参数值是否是一个“安全整数”（safe integer）。一个安全整数是一个符合下面条件的整数<br>#### 语法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isFinite(value)</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="comment">// value</span></span><br><span class="line"><span class="comment">// 要被检测有穷性的值</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="literal">Infinity</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>);       <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(-<span class="literal">Infinity</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="number">0</span>);         <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="number">2e64</span>);      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="string">'0'</span>);       <span class="comment">// false, 全局函数 isFinite('0') 会返回 true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(testValue)</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="comment">// testValue</span></span><br><span class="line"><span class="comment">// 需要检测的参数。</span></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="comment">// 一个布尔值 表示给定的值是否是一个安全整数（safe integer）。</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">3</span>);                    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>))       <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>)   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="literal">NaN</span>);                  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="literal">Infinity</span>);             <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="string">"3"</span>);                  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">3.1</span>);                  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">3.0</span>);                  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><br><br>#### 注意<br>和<font color="red">全局的 isFinite() </font>函数相比，<font color="red">这个方法不会强制将一个非数值的参数转换成数值</font>，这就意味着，只有数值类型的值，且是有穷的（finite），才返回 true。<br>Number.isSafeInteger() 安全整数范围为 -(253 - 1)到 253 - 1 之间的整数，包含 -(253 - 1)和 253 - 1。<br>### Number.isInteger()<br>Number.isInteger() 方法用来判断给定的参数是否为整数。<br>如果被检测的值是整数，则返回 true，否则返回 false。注意 NaN 和正负 Infinity 不是整数。<br>#### 语法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isInteger(value)</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="comment">// value</span></span><br><span class="line"><span class="comment">// 要判断此参数是否为整数</span></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="comment">// 判断给定值是否是整数的 Boolean 值。</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">0</span>);         <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">1</span>);         <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">-100000</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">0.1</span>);       <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="built_in">Math</span>.PI);   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="literal">Infinity</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(-<span class="literal">Infinity</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="string">"10"</span>);      <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="literal">true</span>);      <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="literal">false</span>);     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger([<span class="number">1</span>]);       <span class="comment">// false</span></span><br></pre></td></tr></table></figure><br><br>### Number.isNaN()<br>Number.isNaN() 方法确定传递的值是否为 NaN和其类型是 Number。它是原始的全局isNaN()的更强大的版本。<br>#### 语法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isNaN(value)</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="comment">// value</span></span><br><span class="line"><span class="comment">// 要被检测是否是 NaN 的值。</span></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="comment">// 一个布尔值，表示给定的值是否是 NaN。</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>);        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="built_in">Number</span>.NaN); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="number">0</span> / <span class="number">0</span>)       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这几个如果使用全局的 isNaN() 时，会返回 true。</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">"NaN"</span>);      <span class="comment">// false，字符串 "NaN" 不会被隐式转换成数字 NaN。</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">undefined</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(&#123;&#125;);         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">"blabla"</span>);   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的都返回 false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="number">37</span>);</span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">"37"</span>);</span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">"37.37"</span>);</span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">""</span>);</span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">" "</span>);</span><br></pre></td></tr></table></figure><br><br>#### 描述<br>在 JavaScript 中，NaN 最特殊的地方就是，<font color="red">我们不能使用相等运算符（== 和 ===）来判断一个值是否是 NaN </font>，因为<font color="red"> NaN == NaN </font> 和<font color="red"> NaN === NaN  </font>都会返回<font color="red"> false </font>。因此，必须要有一个判断值是否是 NaN 的方法。<br><font color="red">同样：</font><br>和全局函数 isNaN() 相比，该方法不会强制将参数转换成数字，只有在参数是真正的数字类型，且值为 NaN 的时候才会返回 true。<br><br>### Number.parseInt() Number.parseFloat()<br>Number.parseFloat() 方法可以把一个字符串解析成浮点数。该方法与全局的 parseFloat() 函数相同，并且处于 ECMAScript 6 规范中（用于全局变量的模块化）。<br>Number.parseInt() 方法可以根据给定的进制数把一个字符串解析成整数。<br>#### 语法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.parseInt(string, radix);</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="comment">// 被解析的值。如果不是一个字符串，则将其转换为字符串。字符串开头的空白符将会被忽略。</span></span><br><span class="line"><span class="comment">// radix</span></span><br><span class="line"><span class="comment">// 一个整数值，指定转换中采用的基数。总是指定该参数可以保证结果可预测。当忽略该参数时，不同的实现环境可能产生不同的结果。</span></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="comment">// 返回解析后的整数值。 如果被解析参数的第一个字符无法被转化成数值类型，则返回 NaN。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.parseFloat(string)</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="comment">// 被解析的字符串。</span></span><br><span class="line"><span class="built_in">Number</span>.parseFloat(<span class="string">"3.14"</span>); <span class="comment">// 3.14</span></span><br><span class="line"><span class="built_in">Number</span>.parseFloat(<span class="string">"314e-2"</span>); <span class="comment">// 3.14</span></span><br><span class="line"><span class="built_in">Number</span>.parseFloat(<span class="string">"FF2"</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><br><br>#### 描述<br><font color="red">该方法和全局的 parseInt() 函数是同一个函数：</font><br><font color="red">该方法和全局的 parseFloat() 函数是同一个函数：</font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">验证<span class="built_in">Number</span>.parseInt、<span class="built_in">Number</span>.parseFloat与全局的 <span class="built_in">parseInt</span>、<span class="built_in">parseFloat</span>是相同的</span><br><span class="line"><span class="built_in">Number</span>.parseInt === <span class="built_in">parseInt</span>; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.parseFloat === <span class="built_in">parseFloat</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"F"</span>, <span class="number">16</span>); <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"17"</span>, <span class="number">8</span>); <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"15"</span>, <span class="number">10</span>); <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"Hello"</span>, <span class="number">8</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"546"</span>, <span class="number">2</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><br><br>parseInt 函数将其第一个参数转换为字符串，解析它，并返回一个整数或NaN。如果不是NaN，返回的值将是作为指定<font color="red">基数（基数）</font>中的数字的第一个参数的整数。<br>例如：radix<font color="red">参数为10</font> 将会把第一个参数看作是一个数的<font color="red">十进制</font>表示,如果不属于radix参数所指定的基数中的字符那么该字符和气候的字符创都将被忽略。<br>在没有指定基数，或者基数为 0 的情况下，JavaScript 作如下处理：<br>- 如果字符串 string 以”0x”或者”0X”开头, 则基数是16 (16进制).<br>- 如果字符串 string 以”0”开头, 基数是8（八进制）或者10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用10，但是并不是所有的浏览器都遵循这个规定。因此，永远都要明确给出radix参数的值。<br>- 如果字符串 string 以其它任何值开头，则基数是10 (十进制)。<br>需要注意的是：<br><font color="red">如果第一个字符不能被转换成数字，parseInt返回NaN。</font><h3 id="Number-prototype-toFixed-、Number-prototype-toPrecision"><a href="#Number-prototype-toFixed-、Number-prototype-toPrecision" class="headerlink" title="Number.prototype.toFixed()、Number.prototype.toPrecision()"></a>Number.prototype.toFixed()、Number.prototype.toPrecision()</h3><p>toFixed() 方法使用定点表示法来格式化一个数。<br>toPrecision() 方法以指定的精度返回该数值对象的字符串表示。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">numObj.toFixed(digits)</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="comment">// digits</span></span><br><span class="line"><span class="comment">// 小数点后数字的个数；介于 0 到 20 （包括）之间，实现环境可能支持更大范围。如果忽略该参数，则默认为 0。</span></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="comment">// 一个数值的字符串表现形式，不使用指数记数法，而是在小数点后有 digits 位数字。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numObj = <span class="number">12345.6789</span>;</span><br><span class="line">numObj.toFixed();         <span class="comment">// 返回 "12346"：进行四舍五入，不包括小数部分</span></span><br><span class="line">numObj.toFixed(<span class="number">1</span>);        <span class="comment">// 返回 "12345.7"：进行四舍五入</span></span><br><span class="line">numObj.toFixed(<span class="number">6</span>);        <span class="comment">// 返回 "12345.678900"：用0填充</span></span><br><span class="line">(<span class="number">1.23e+20</span>).toFixed(<span class="number">2</span>);    <span class="comment">// 返回 "123000000000000000000.00"</span></span><br><span class="line">(<span class="number">1.23e-10</span>).toFixed(<span class="number">2</span>);    <span class="comment">// 返回 "0.00"</span></span><br><span class="line"><span class="number">2.34</span>.toFixed(<span class="number">1</span>);          <span class="comment">// 返回 "2.3"</span></span><br><span class="line"><span class="number">-2.34</span>.toFixed(<span class="number">1</span>);         <span class="comment">// 返回 -2.3 （由于操作符优先级，负数不会返回字符串）</span></span><br><span class="line">(<span class="number">-2.34</span>).toFixed(<span class="number">1</span>);       <span class="comment">// 返回 "-2.3" （若用括号提高优先级，则返回字符串）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">numObj.toPrecision(precision)</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="comment">// precision</span></span><br><span class="line"><span class="comment">// 可选。一个用来指定有效数个数的整数。</span></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="comment">// 以定点表示法或指数表示法表示的一个数值对象的字符串表示，四舍五入到 precision 参数指定的显示数字位数。</span></span><br><span class="line"><span class="keyword">var</span> numObj = <span class="number">5.123456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"numObj.toPrecision()  is "</span> + numObj.toPrecision());  <span class="comment">//输出 5.123456</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"numObj.toPrecision(5) is "</span> + numObj.toPrecision(<span class="number">5</span>)); <span class="comment">//输出 5.1235</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"numObj.toPrecision(2) is "</span> + numObj.toPrecision(<span class="number">2</span>)); <span class="comment">//输出 5.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"numObj.toPrecision(1) is "</span> + numObj.toPrecision(<span class="number">1</span>)); <span class="comment">//输出 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：在某些情况下会以指数表示法返回</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">1234.5</span>).toPrecision(<span class="number">2</span>)); <span class="comment">// "1.2e+3"</span></span><br></pre></td></tr></table></figure><p>该数值在必要时进行四舍五入，另外在必要时会用 0 来填充小数部分，以便小数部分有指定的位数。</p><h3 id="Number-prototype-toLocaleString-、Number-prototype-toString-、Number-prototype-valueOf"><a href="#Number-prototype-toLocaleString-、Number-prototype-toString-、Number-prototype-valueOf" class="headerlink" title="Number.prototype.toLocaleString()、Number.prototype.toString()、Number.prototype.valueOf()"></a>Number.prototype.toLocaleString()、Number.prototype.toString()、Number.prototype.valueOf()</h3><p>toString() 方法返回指定 Number 对象的字符串表示形式。<br>valueOf() 方法返回一个被 Number 对象包装的原始值。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">numObj.toString([radix]) </span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"> <span class="comment">// radix</span></span><br><span class="line"> <span class="comment">// 指定要用于数字到字符串的转换的基数(从2到36)。如果未指定 radix 参数，则默认值为 10。</span></span><br><span class="line"> <span class="keyword">var</span> count = <span class="number">10</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(count.toString());    <span class="comment">// 输出 '10'</span></span><br><span class="line"> <span class="built_in">console</span>.log((<span class="number">17</span>).toString());     <span class="comment">// 输出 '17'</span></span><br><span class="line"> <span class="built_in">console</span>.log((<span class="number">17.2</span>).toString());   <span class="comment">// 输出 '17.2'</span></span><br><span class="line"> <span class="keyword">var</span> x = <span class="number">6</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(x.toString(<span class="number">2</span>));       <span class="comment">// 输出 '110'</span></span><br><span class="line"> <span class="built_in">console</span>.log((<span class="number">254</span>).toString(<span class="number">16</span>));  <span class="comment">// 输出 'fe'</span></span><br><span class="line"> <span class="built_in">console</span>.log((<span class="number">-10</span>).toString(<span class="number">2</span>));   <span class="comment">// 输出 '-1010'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> numObj.valueOf()</span><br><span class="line"> <span class="keyword">var</span> numObj = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> numObj); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> num = numObj.valueOf();</span><br><span class="line"> <span class="built_in">console</span>.log(num);           <span class="comment">// 10</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);    <span class="comment">// number</span></span><br></pre></td></tr></table></figure><p>Number 对象覆盖了 Object 对象上的 toString() 方法，它不是继承的 Object.prototype.toString()。对于 Number 对象，toString() 方法以指定的基数返回该对象的字符串表示。<br>valueOf()该方法通常是由 JavaScript 引擎在内部隐式调用的，而不是由用户在代码中显式调用的</p>]]></content>
    
    <summary type="html">
    
      ES6中Number新增了一些方法如Number.isFinite()、Number.isInteger()、Number.isNaN()等等
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/categories/JavaScript/ECMAScript6/"/>
    
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/tags/ECMAScript6/"/>
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>html5中的canvas基本使用方法</title>
    <link href="http://asyncnode.com//blog/canvas-1.html"/>
    <id>http://asyncnode.com//blog/canvas-1.html</id>
    <published>2017-08-03T08:23:48.000Z</published>
    <updated>2018-11-13T08:48:55.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>canvas元素负责在页面中设定一个区域，然后就可以通过JavaScript动态地在这个区域中绘制图形。<br>与浏览器环境中的其他组件类似，<canvas>由几组API构成，但非所有浏览器都支持所有这些api,基本绘制能力的2D上下文，<canvas>还建议了一个名为webGL的3D上下文。</canvas></canvas></p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.canvas1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">            margin: auto;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"canvas1"</span>  <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 使用canvas必须先设置其width和height属性，指定可以绘图的区域大小</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'.canvas'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ctx = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 判断当前浏览器支不支持 canvas</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (canvas.getContext) &#123;</span></span><br><span class="line"><span class="javascript">            ctx = canvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="javascript">            ctx.strokeStyle = <span class="string">'red'</span>;</span></span><br><span class="line"><span class="javascript">            ctx.fillStyle = <span class="string">'#0000ff'</span>;</span></span><br><span class="line"><span class="undefined">            ctx.fillRect(0, 0, 150, 150);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// fillStyle 填充颜色、strokeStyle 描边颜色</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 字符串（颜色名、十六进制、rgb、rgba、hsl、hsla）、渐变对象、模式对象</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以获取到<font color="red">canvas</font>dom,再通过<font color="red">getContext(‘2d’)</font>获取到2D上下文，通过fillStyle<font color="red">fillStyle</font>设置填充颜色，通过<font color="red">strokeStyle</font>设置描边颜色（默认显示 #000），fillRect(0, 0, 150, 150)<br>设置矩形的位置和长宽<br>效果如下所示：<br>  <img src="../images/canvas/canvas_1.jpg" alt="canvas_1"></p><h3 id="栅格"><a href="#栅格" class="headerlink" title="栅格"></a>栅格</h3><p>在我们开始画图之前，我们需要了解一下画布栅格（canvas grid）以及坐标空间。栅格的起点为左上角（坐标为（0,0））。所有元素的位置都相对于原点定位。所以图中蓝色方形左上角的坐标为距离左边（X轴）x像素，距离上边（Y轴）y像素（坐标为（x,y））。在课程的最后我们会平移原点到不同的坐标上，旋转网格以及缩放。现在我们还是使用原来的设置。<br>  <img src="../images/canvas/Canvas_default_grid.png" alt="canvas_1"></p><h3 id="fillStyle-strokeStyle"><a href="#fillStyle-strokeStyle" class="headerlink" title="fillStyle strokeStyle"></a>fillStyle strokeStyle</h3><p>fillStyle、strokeStyle这个两个属性的值可以是字符串、渐变对象或者模式对象，而且他们的默认值都是”#000000”。字符串值可以为颜色值、十六进制码、rgb、rgba、hsl或hsla.</p><h3 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h3><p>不同于SVG，HTML中的元素canvas只支持一种原生的图形绘制：矩形。所有其他的图形的绘制都至少需要生成一条路径。不过，我们拥有众多路径生成的方法让复杂图形的绘制成为了可能。</p><h4 id="fillRect"><a href="#fillRect" class="headerlink" title="fillRect"></a>fillRect</h4><p>fillRect(x, y, width, height)<br>参数<br>x<br>矩形起始点的 x 轴坐标。<br>y<br>矩形起始点的 y 轴坐标。<br>width<br>矩形的宽度。<br>height<br>矩形的高度。<br>绘制一个<br>  <img src="../images/canvas/canvas_strokeRect.png" alt="canvas_1"><br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">ctx.strokeStyle = <span class="string">"green"</span>;</span><br><span class="line">ctx.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h4 id="strokeRect"><a href="#strokeRect" class="headerlink" title="strokeRect"></a>strokeRect</h4><p>参数<br>x<br>矩形起始点的 x 轴坐标。<br>y<br>矩形起始点的 y 轴坐标。<br>width<br>矩形的宽度。<br>height<br>矩形的高度。<br>  <img src="../images/canvas/canvas_strokeRect.png" alt="canvas_1"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">ctx.strokeStyle = <span class="string">"green"</span>;</span><br><span class="line">ctx.strokeRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h4 id="clearRect"><a href="#clearRect" class="headerlink" title="clearRect"></a>clearRect</h4><p>参数<br>x<br>矩形起始点的 x 轴坐标。<br>y<br>矩形起始点的 y 轴坐标。<br>width<br>矩形的宽度。<br>height<br>矩形的高度。<br>这仅是一段简单地使用 clearRect 方法的代码片段。<br>  <img src="../images/canvas/canvas_clearRect.png" alt="canvas_1"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">120</span>,<span class="number">120</span>);</span><br><span class="line">ctx.closePath(); <span class="comment">// draws last line of the triangle</span></span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line">ctx.clearRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// clear the whole canvas</span></span><br><span class="line"><span class="comment">// ctx.clearRect(0, 0, canvas.width, canvas.height);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      canvas的基本用法，和用canvas实现绘制高德地图的多层，并且转为base64格式为（image/png）
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
      <category term="html5" scheme="http://asyncnode.com/categories/JavaScript/html5/"/>
    
      <category term="canvas" scheme="http://asyncnode.com/categories/JavaScript/html5/canvas/"/>
    
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
      <category term="html5" scheme="http://asyncnode.com/tags/html5/"/>
    
      <category term="canvas" scheme="http://asyncnode.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>html5中的canvas的使用方法，实现自定义绘制图形</title>
    <link href="http://asyncnode.com//blog/canvas-2.html"/>
    <id>http://asyncnode.com//blog/canvas-2.html</id>
    <published>2017-08-03T08:23:48.000Z</published>
    <updated>2018-11-13T08:48:55.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h2><p>图形的基本元素是路径。路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。一个路径，甚至一个子路径，都是闭合的。使用路径绘制图形需要一些额外的步骤。<br>1、首先，你需要创建路径起始点。<br>2、然后你使用画图命令去画出路径。<br>3、之后你把路径封闭。<br>4、一旦路径生成，你就能通过描边或填充路径区域来渲染图形。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="beginPath"><a href="#beginPath" class="headerlink" title="beginPath()"></a><strong>beginPath()</strong></h4><p>新建一条路径，生成之后，图形绘制命令会被指向到<font color="red">路径上生成路径。</font></p><h4 id="closePath"><a href="#closePath" class="headerlink" title="closePath()"></a><strong>closePath()</strong></h4><p>闭合路径之后图形绘制命令又<font color="red">重新指向到上下文</font>中</p><h4 id="stroke"><a href="#stroke" class="headerlink" title="stroke()"></a><strong>stroke()</strong></h4><p>通过<font color="red">线条</font>来绘制图像轮廓</p><h4 id="fill"><a href="#fill" class="headerlink" title="fill()"></a><strong>fill()</strong></h4><p>通过填充路径的内容区域生成<font color="red">实心的图形</font>。</p><h4 id="moveTo-x-y"><a href="#moveTo-x-y" class="headerlink" title="moveTo(x, y)"></a><strong>moveTo(x, y)</strong></h4><p>将笔触移动到指定的坐标x以及y上。<br>你通常会使用moveTo()函数设置起点，使用moveTo()绘制一些不连续的路径<br>移动中心点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'.canvas'</span>);</span><br><span class="line">    <span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">        <span class="keyword">var</span> ctx  = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.arc(<span class="number">75</span>,<span class="number">75</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>); <span class="comment">// 绘制</span></span><br><span class="line">        ctx.moveTo(<span class="number">110</span>,<span class="number">75</span>);</span><br><span class="line">        ctx.arc(<span class="number">75</span>,<span class="number">75</span>,<span class="number">35</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI,<span class="literal">false</span>);   <span class="comment">// 口(顺时针)</span></span><br><span class="line">        ctx.moveTo(<span class="number">65</span>,<span class="number">65</span>);</span><br><span class="line">        ctx.arc(<span class="number">60</span>,<span class="number">65</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);  <span class="comment">// 左眼</span></span><br><span class="line">        ctx.moveTo(<span class="number">95</span>,<span class="number">65</span>);</span><br><span class="line">        ctx.arc(<span class="number">90</span>,<span class="number">65</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);  <span class="comment">// 右眼</span></span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> <img src="../images/canvas/Canvas_smiley.png" alt="css rotateX"></p><h4 id="lineTo-x-y"><a href="#lineTo-x-y" class="headerlink" title="lineTo(x, y)"></a><strong>lineTo(x, y)</strong></h4><p><font color="red">绘制直线</font>，需要用到的方法lineTo().<br>绘制一条从当前位置到指定x以及y位置的直线<br>绘制一个填充、描边的三角形<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'.canvas'</span>);]</span><br><span class="line">    <span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        <span class="comment">// 填充三角形</span></span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">25</span>,<span class="number">25</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">105</span>,<span class="number">25</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">25</span>,<span class="number">105</span>);</span><br><span class="line">        ctx.fill();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 描边三角形</span></span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">125</span>,<span class="number">125</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">125</span>,<span class="number">45</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">45</span>,<span class="number">125</span>);</span><br><span class="line">        ctx.closePath();</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> <img src="../images/canvas/Canvas_sanjiao.png" alt="css rotateX"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>注意：当前路径为空，即调用beginPath()之后，或者canvas刚建的时候，<font color="red">第一条路径</font>构造命令通常被视为是<font color="red">moveTo（）</font>，无论最后的是什么。出于这个原因，你几乎总是要在设置路径之后专门指定你的起始位置。<br>注意：当你调用<font color="red">fill()</font>函数时，所有没有闭合的形状都会自动闭合，所以你<font color="red">不需要</font>调用<font color="red">closePath()</font>函数。但是调用<font color="red">stroke()</font>时<font color="red">不会</font>自动闭合。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>绘制一个<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">""</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.canvas</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 300px;</span></span><br><span class="line"><span class="undefined">            height: 300px;</span></span><br><span class="line"><span class="undefined">            margin: auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (canvas.getContext)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="undefined">                ctx.beginPath();</span></span><br><span class="line"><span class="undefined">                ctx.moveTo(75,50);</span></span><br><span class="line"><span class="undefined">                ctx.lineTo(100,75);</span></span><br><span class="line"><span class="undefined">                ctx.lineTo(100,25);</span></span><br><span class="line"><span class="undefined">                ctx.fill();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        draw();</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      canvas的基本用法，和用canvas实现绘制高德地图的多层，并且转为base64格式为（image/png）
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
      <category term="html5" scheme="http://asyncnode.com/categories/JavaScript/html5/"/>
    
      <category term="canvas" scheme="http://asyncnode.com/categories/JavaScript/html5/canvas/"/>
    
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
      <category term="html5" scheme="http://asyncnode.com/tags/html5/"/>
    
      <category term="canvas" scheme="http://asyncnode.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中Array、Object深度复制、数据类型</title>
    <link href="http://asyncnode.com//blog/ArrayObject-deepCopy.html"/>
    <id>http://asyncnode.com//blog/ArrayObject-deepCopy.html</id>
    <published>2017-08-02T07:25:33.000Z</published>
    <updated>2018-11-13T08:48:55.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>在JavaScript中类型分为两类：基本类型(值类型)、引用类型</p><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>Undefind、Null、Boolean、Number、String</p><h4 id="实现复制"><a href="#实现复制" class="headerlink" title="实现复制"></a>实现复制</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'小伙子,25278'</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = str;</span><br><span class="line">str1 = <span class="string">"大伙子,5967"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 小伙子,25278</span></span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">// 大伙子,5967</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">25278</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = num;</span><br><span class="line">num1 = <span class="number">5967</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 25278</span></span><br><span class="line"><span class="built_in">console</span>.log(num1); <span class="comment">// 5967</span></span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>javascript里的<font color="red">基本类型（值类型）</font>是不可以改变的，javascript也没有提供任何一个改变字符串的方法和语法.<font color="red">他不是能当成对象来使用的。</font><br>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"myobject"</span>;</span><br><span class="line">str.name = <span class="string">"myname"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.name); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">num.name = <span class="string">"myname"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>如Array、Object<br>javascript引用数据类型是保存在堆内存中的对象，与其它语言不同的是，你不可以直接访问堆内存空间中的位置和操作堆内存空间。只能通过操作对象的在栈内存中的引用地址。所以引用类型的数据，在栈内存中保存的实际上是对象在堆内存中的引用地址。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2.name = <span class="string">"我有名字了"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.name); <span class="comment">// 我有名字了</span></span><br></pre></td></tr></table></figure><p>示例图：<img src="../images/Array_Object.jpg" alt="目录结构"><br>自然，给obj2添加name属性，实际上是给堆内存中的对象添加了name属性，obj2和obj1在栈内存中保存的只是堆内存对象的引用地址，虽然也是拷贝了一份，但指向的对象却是同一个。故而改变obj2引起了obj1的改变。</p><p><strong>Array实现复制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr;</span><br><span class="line">arr1.push(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></p><p><font color="red">改为：</font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// Array.prototype.slice() 返回一个新的数组，可以切断他们之间的联系</span></span><br><span class="line"><span class="keyword">var</span> arr1 = arr.slice(); <span class="comment">// 根据数组下标改变数组</span></span><br><span class="line"><span class="comment">// Array.prototype.splice() 返回一个新的数组，可以切断他们之间的联系</span></span><br><span class="line"><span class="keyword">var</span> arr2 = arr.splice(); <span class="comment">// 根据数组下标改变数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = arr.concat();</span><br><span class="line">arr1.push(<span class="number">6</span>);</span><br><span class="line">arr2.push(<span class="number">6</span>);</span><br><span class="line">arr3.push(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [6]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></p><p><font color="red">Array.prototype.slice()</font><a href="http://asyncnode.com/blog/es6-Array1.html">http://asyncnode.com/blog/es6-Array1.html</a>查看详情</p><p><font color="red">Array.prototype.splice()</font><a href="http://asyncnode.com/blog/es6-Array1.html">http://asyncnode.com/blog/es6-Array1.html</a>查看详情</p><p><font color="red">Array.prototype.concat()</font><a href="http://asyncnode.com/blog/es6-Array.html">http://asyncnode.com/blog/es6-Array.html</a>查看详情<br><strong>Object实现复制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'111'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = obj;</span><br><span class="line">obj1.age = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// Object &#123;name: "111", age: 12&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">// Object &#123;name: "111", age: 12&#125;</span></span><br></pre></td></tr></table></figure></p><p><font color="red">改为：</font>、<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'111'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj)); <span class="comment">// 先把对象通过浏览器对象转为 JSON字符串，再转为 JSON对象</span></span><br><span class="line">obj1.age = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// Object &#123;name: "111"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">// Object &#123;name: "111", age: 12&#125;</span></span><br></pre></td></tr></table></figure></p><p><font color="red">同时Object也是有合并方法的为assgin(),但是他是不能项Array.prototype.concat()实现深度复制</font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">     name: <span class="string">'111'</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> obj1 = <span class="built_in">Object</span>.assgin(obj, &#123;&#125;); <span class="comment">// Object的合并对象方法</span></span><br><span class="line"> obj1.age = <span class="number">12</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(obj); <span class="comment">// Object &#123;name: "111", age: 12&#125; </span></span><br><span class="line"> <span class="built_in">console</span>.log(obj1); <span class="comment">// Object &#123;name: "111", age: 12&#125;</span></span><br></pre></td></tr></table></figure></p><p><font color="red">最后一种也是比较官方的方法</font><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> copy = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj));</span><br><span class="line"><span class="keyword">var</span> propNames = <span class="built_in">Object</span>.getOwnPropertyNames(obj);</span><br><span class="line"></span><br><span class="line">propNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, name);</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(copy, name, desc);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = copy(obj1); <span class="comment">// obj2 looks like obj1 now</span></span><br><span class="line">obj2.c = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">// Object &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// Object &#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure></p><p>下面的代码会创建一个给定对象的副本。 创建对象的副本有不同的方法，以下是只是一种方法，并解释了Array.prototype.forEach() 是如何使用ECMAScript 5 Object.* 元属性（meta property ）函数工作的。</p>]]></content>
    
    <summary type="html">
    
      在Javascript中复制String、Number等基础类型是很简单的，但是复制Array、Object就不是那么简单的了，JavaScript中数据类型的区分
    
    </summary>
    
      <category term="JavaScript" scheme="http://asyncnode.com/categories/JavaScript/"/>
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/categories/JavaScript/ECMAScript6/"/>
    
    
      <category term="ECMAScript6" scheme="http://asyncnode.com/tags/ECMAScript6/"/>
    
      <category term="JavaScript" scheme="http://asyncnode.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
